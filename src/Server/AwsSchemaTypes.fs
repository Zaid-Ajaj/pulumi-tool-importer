// This file is auto generated using the build project, do not edit this file directly.
// To regenerate it, run `dotnet run GenerateAwsSchemaTypes` in the root of the repository.
// generated from AWS schema version 6.35.0
[<RequireQualifiedAccess>]
module AwsSchemaTypes

let ancestorsByType = Map.ofList [
    "aws:alb/listener:Listener", [
        "aws:lb/loadBalancer:LoadBalancer"
    ]
    "aws:alb/loadBalancer:LoadBalancer", [
        "aws:ec2/securityGroup:SecurityGroup"
        "aws:ec2/vpc:Vpc"
    ]
    "aws:alb/targetGroup:TargetGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:apprunner/vpcConnector:VpcConnector", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:cloudhsmv2/cluster:Cluster", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:dax/subnetGroup:SubnetGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:dms/replicationSubnetGroup:ReplicationSubnetGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:docdb/clusterSnapshot:ClusterSnapshot", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/carrierGateway:CarrierGateway", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/defaultRouteTable:DefaultRouteTable", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/defaultSecurityGroup:DefaultSecurityGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/defaultSubnet:DefaultSubnet", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/egressOnlyInternetGateway:EgressOnlyInternetGateway", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/flowLog:FlowLog", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/instance:Instance", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:ec2/internetGateway:InternetGateway", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/internetGatewayAttachment:InternetGatewayAttachment", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/launchConfiguration:LaunchConfiguration", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:ec2/localGatewayRouteTableVpcAssociation:LocalGatewayRouteTableVpcAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/networkAcl:NetworkAcl", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/networkInterface:NetworkInterface", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:ec2/routeTable:RouteTable", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/securityGroup:SecurityGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/spotInstanceRequest:SpotInstanceRequest", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:ec2/subnet:Subnet", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpcDhcpOptionsAssociation:VpcDhcpOptionsAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpcEndpoint:VpcEndpoint", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpcIpv6CidrBlockAssociation:VpcIpv6CidrBlockAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpcPeeringConnection:VpcPeeringConnection", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpnGateway:VpnGateway", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2clientvpn/endpoint:Endpoint", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2clientvpn/networkAssociation:NetworkAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2transitgateway/instanceConnectEndpoint:InstanceConnectEndpoint", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2transitgateway/vpcAttachment:VpcAttachment", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:efs/mountTarget:MountTarget", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:elasticache/subnetGroup:SubnetGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:elb/loadBalancer:LoadBalancer", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:emr/studio:Studio", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:fsx/fileCache:FileCache", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:fsx/lustreFileSystem:LustreFileSystem", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:fsx/ontapFileSystem:OntapFileSystem", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:fsx/openZfsFileSystem:OpenZfsFileSystem", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:fsx/windowsFileSystem:WindowsFileSystem", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:glue/devEndpoint:DevEndpoint", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:lb/listener:Listener", [
        "aws:lb/targetGroup:TargetGroup"
        "aws:lb/loadBalancer:LoadBalancer"
    ]
    "aws:lb/loadBalancer:LoadBalancer", [
        "aws:ec2/vpc:Vpc"
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:lb/targetGroup:TargetGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:m2/environment:Environment", [
        "aws:lb/loadBalancer:LoadBalancer"
    ]
    "aws:memorydb/subnetGroup:SubnetGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:mq/broker:Broker", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:msk/vpcConnection:VpcConnection", [
        "aws:ec2/securityGroup:SecurityGroup"
        "aws:ec2/vpc:Vpc"
    ]
    "aws:neptune/clusterSnapshot:ClusterSnapshot", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:networkfirewall/firewall:Firewall", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:opsworks/stack:Stack", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:rds/clusterSnapshot:ClusterSnapshot", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:rds/proxyEndpoint:ProxyEndpoint", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:rds/snapshot:Snapshot", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:rds/snapshotCopy:SnapshotCopy", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:rds/subnetGroup:SubnetGroup", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:route53/resolverFirewallRuleGroupAssociation:ResolverFirewallRuleGroupAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:route53/resolverRuleAssociation:ResolverRuleAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:route53/vpcAssociationAuthorization:VpcAssociationAuthorization", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:route53/zoneAssociation:ZoneAssociation", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:sagemaker/domain:Domain", [
        "aws:ec2/vpc:Vpc"
    ]
    "aws:sagemaker/notebookInstance:NotebookInstance", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
    "aws:vpc/securityGroupIngressRule:SecurityGroupIngressRule", [
        "aws:ec2/securityGroup:SecurityGroup"
    ]
]

let availableTypes = set [|
    "aws:accessanalyzer/analyzer:Analyzer"
    "aws:accessanalyzer/archiveRule:ArchiveRule"
    "aws:account/alternativeContact:AlternativeContact"
    "aws:account/primaryContact:PrimaryContact"
    "aws:account/region:Region"
    "aws:acm/certificate:Certificate"
    "aws:acm/certificateValidation:CertificateValidation"
    "aws:acmpca/certificate:Certificate"
    "aws:acmpca/certificateAuthority:CertificateAuthority"
    "aws:acmpca/certificateAuthorityCertificate:CertificateAuthorityCertificate"
    "aws:acmpca/permission:Permission"
    "aws:acmpca/policy:Policy"
    "aws:alb/listener:Listener"
    "aws:alb/listenerCertificate:ListenerCertificate"
    "aws:alb/listenerRule:ListenerRule"
    "aws:alb/loadBalancer:LoadBalancer"
    "aws:alb/targetGroup:TargetGroup"
    "aws:alb/targetGroupAttachment:TargetGroupAttachment"
    "aws:amp/alertManagerDefinition:AlertManagerDefinition"
    "aws:amp/ruleGroupNamespace:RuleGroupNamespace"
    "aws:amp/scraper:Scraper"
    "aws:amp/workspace:Workspace"
    "aws:amplify/app:App"
    "aws:amplify/backendEnvironment:BackendEnvironment"
    "aws:amplify/branch:Branch"
    "aws:amplify/domainAssociation:DomainAssociation"
    "aws:amplify/webhook:Webhook"
    "aws:apigateway/account:Account"
    "aws:apigateway/apiKey:ApiKey"
    "aws:apigateway/authorizer:Authorizer"
    "aws:apigateway/basePathMapping:BasePathMapping"
    "aws:apigateway/clientCertificate:ClientCertificate"
    "aws:apigateway/deployment:Deployment"
    "aws:apigateway/documentationPart:DocumentationPart"
    "aws:apigateway/documentationVersion:DocumentationVersion"
    "aws:apigateway/domainName:DomainName"
    "aws:apigateway/integration:Integration"
    "aws:apigateway/integrationResponse:IntegrationResponse"
    "aws:apigateway/method:Method"
    "aws:apigateway/methodResponse:MethodResponse"
    "aws:apigateway/methodSettings:MethodSettings"
    "aws:apigateway/model:Model"
    "aws:apigateway/requestValidator:RequestValidator"
    "aws:apigateway/resource:Resource"
    "aws:apigateway/response:Response"
    "aws:apigateway/restApi:RestApi"
    "aws:apigateway/restApiPolicy:RestApiPolicy"
    "aws:apigateway/stage:Stage"
    "aws:apigateway/usagePlan:UsagePlan"
    "aws:apigateway/usagePlanKey:UsagePlanKey"
    "aws:apigateway/vpcLink:VpcLink"
    "aws:apigatewayv2/api:Api"
    "aws:apigatewayv2/apiMapping:ApiMapping"
    "aws:apigatewayv2/authorizer:Authorizer"
    "aws:apigatewayv2/deployment:Deployment"
    "aws:apigatewayv2/domainName:DomainName"
    "aws:apigatewayv2/integration:Integration"
    "aws:apigatewayv2/integrationResponse:IntegrationResponse"
    "aws:apigatewayv2/model:Model"
    "aws:apigatewayv2/route:Route"
    "aws:apigatewayv2/routeResponse:RouteResponse"
    "aws:apigatewayv2/stage:Stage"
    "aws:apigatewayv2/vpcLink:VpcLink"
    "aws:appautoscaling/policy:Policy"
    "aws:appautoscaling/scheduledAction:ScheduledAction"
    "aws:appautoscaling/target:Target"
    "aws:appconfig/application:Application"
    "aws:appconfig/configurationProfile:ConfigurationProfile"
    "aws:appconfig/deployment:Deployment"
    "aws:appconfig/deploymentStrategy:DeploymentStrategy"
    "aws:appconfig/environment:Environment"
    "aws:appconfig/eventIntegration:EventIntegration"
    "aws:appconfig/extension:Extension"
    "aws:appconfig/extensionAssociation:ExtensionAssociation"
    "aws:appconfig/hostedConfigurationVersion:HostedConfigurationVersion"
    "aws:appflow/connectorProfile:ConnectorProfile"
    "aws:appflow/flow:Flow"
    "aws:appintegrations/dataIntegration:DataIntegration"
    "aws:applicationinsights/application:Application"
    "aws:appmesh/gatewayRoute:GatewayRoute"
    "aws:appmesh/mesh:Mesh"
    "aws:appmesh/route:Route"
    "aws:appmesh/virtualGateway:VirtualGateway"
    "aws:appmesh/virtualNode:VirtualNode"
    "aws:appmesh/virtualRouter:VirtualRouter"
    "aws:appmesh/virtualService:VirtualService"
    "aws:apprunner/autoScalingConfigurationVersion:AutoScalingConfigurationVersion"
    "aws:apprunner/connection:Connection"
    "aws:apprunner/customDomainAssociation:CustomDomainAssociation"
    "aws:apprunner/defaultAutoScalingConfigurationVersion:DefaultAutoScalingConfigurationVersion"
    "aws:apprunner/deployment:Deployment"
    "aws:apprunner/observabilityConfiguration:ObservabilityConfiguration"
    "aws:apprunner/service:Service"
    "aws:apprunner/vpcConnector:VpcConnector"
    "aws:apprunner/vpcIngressConnection:VpcIngressConnection"
    "aws:appstream/directoryConfig:DirectoryConfig"
    "aws:appstream/fleet:Fleet"
    "aws:appstream/fleetStackAssociation:FleetStackAssociation"
    "aws:appstream/imageBuilder:ImageBuilder"
    "aws:appstream/stack:Stack"
    "aws:appstream/user:User"
    "aws:appstream/userStackAssociation:UserStackAssociation"
    "aws:appsync/apiCache:ApiCache"
    "aws:appsync/apiKey:ApiKey"
    "aws:appsync/dataSource:DataSource"
    "aws:appsync/domainName:DomainName"
    "aws:appsync/domainNameApiAssociation:DomainNameApiAssociation"
    "aws:appsync/function:Function"
    "aws:appsync/graphQLApi:GraphQLApi"
    "aws:appsync/resolver:Resolver"
    "aws:appsync/type:Type"
    "aws:athena/dataCatalog:DataCatalog"
    "aws:athena/database:Database"
    "aws:athena/namedQuery:NamedQuery"
    "aws:athena/preparedStatement:PreparedStatement"
    "aws:athena/workgroup:Workgroup"
    "aws:auditmanager/accountRegistration:AccountRegistration"
    "aws:auditmanager/assessment:Assessment"
    "aws:auditmanager/assessmentDelegation:AssessmentDelegation"
    "aws:auditmanager/assessmentReport:AssessmentReport"
    "aws:auditmanager/control:Control"
    "aws:auditmanager/framework:Framework"
    "aws:auditmanager/frameworkShare:FrameworkShare"
    "aws:auditmanager/organizationAdminAccountRegistration:OrganizationAdminAccountRegistration"
    "aws:autoscaling/attachment:Attachment"
    "aws:autoscaling/group:Group"
    "aws:autoscaling/lifecycleHook:LifecycleHook"
    "aws:autoscaling/notification:Notification"
    "aws:autoscaling/policy:Policy"
    "aws:autoscaling/schedule:Schedule"
    "aws:autoscaling/tag:Tag"
    "aws:autoscaling/trafficSourceAttachment:TrafficSourceAttachment"
    "aws:autoscalingplans/scalingPlan:ScalingPlan"
    "aws:backup/framework:Framework"
    "aws:backup/globalSettings:GlobalSettings"
    "aws:backup/plan:Plan"
    "aws:backup/regionSettings:RegionSettings"
    "aws:backup/reportPlan:ReportPlan"
    "aws:backup/selection:Selection"
    "aws:backup/vault:Vault"
    "aws:backup/vaultLockConfiguration:VaultLockConfiguration"
    "aws:backup/vaultNotifications:VaultNotifications"
    "aws:backup/vaultPolicy:VaultPolicy"
    "aws:batch/computeEnvironment:ComputeEnvironment"
    "aws:batch/jobDefinition:JobDefinition"
    "aws:batch/jobQueue:JobQueue"
    "aws:batch/schedulingPolicy:SchedulingPolicy"
    "aws:bcmdata/export:Export"
    "aws:bedrock/agentAgent:AgentAgent"
    "aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup"
    "aws:bedrock/agentAgentAlias:AgentAgentAlias"
    "aws:bedrock/agentAgentKnowledgeBaseAssociation:AgentAgentKnowledgeBaseAssociation"
    "aws:bedrock/agentKnowledgeBase:AgentKnowledgeBase"
    "aws:bedrock/customModel:CustomModel"
    "aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput"
    "aws:bedrockmodel/invocationLoggingConfiguration:InvocationLoggingConfiguration"
    "aws:budgets/budget:Budget"
    "aws:budgets/budgetAction:BudgetAction"
    "aws:cfg/aggregateAuthorization:AggregateAuthorization"
    "aws:cfg/configurationAggregator:ConfigurationAggregator"
    "aws:cfg/conformancePack:ConformancePack"
    "aws:cfg/deliveryChannel:DeliveryChannel"
    "aws:cfg/organizationConformancePack:OrganizationConformancePack"
    "aws:cfg/organizationCustomPolicyRule:OrganizationCustomPolicyRule"
    "aws:cfg/organizationCustomRule:OrganizationCustomRule"
    "aws:cfg/organizationManagedRule:OrganizationManagedRule"
    "aws:cfg/recorder:Recorder"
    "aws:cfg/recorderStatus:RecorderStatus"
    "aws:cfg/remediationConfiguration:RemediationConfiguration"
    "aws:cfg/retentionConfiguration:RetentionConfiguration"
    "aws:cfg/rule:Rule"
    "aws:chime/sdkvoiceGlobalSettings:SdkvoiceGlobalSettings"
    "aws:chime/sdkvoiceSipMediaApplication:SdkvoiceSipMediaApplication"
    "aws:chime/sdkvoiceSipRule:SdkvoiceSipRule"
    "aws:chime/sdkvoiceVoiceProfileDomain:SdkvoiceVoiceProfileDomain"
    "aws:chime/voiceConnector:VoiceConnector"
    "aws:chime/voiceConnectorGroup:VoiceConnectorGroup"
    "aws:chime/voiceConnectorLogging:VoiceConnectorLogging"
    "aws:chime/voiceConnectorOrganization:VoiceConnectorOrganization"
    "aws:chime/voiceConnectorStreaming:VoiceConnectorStreaming"
    "aws:chime/voiceConnectorTermination:VoiceConnectorTermination"
    "aws:chime/voiceConnectorTerminationCredentials:VoiceConnectorTerminationCredentials"
    "aws:chimesdkmediapipelines/mediaInsightsPipelineConfiguration:MediaInsightsPipelineConfiguration"
    "aws:cleanrooms/collaboration:Collaboration"
    "aws:cleanrooms/configuredTable:ConfiguredTable"
    "aws:cloud9/environmentEC2:EnvironmentEC2"
    "aws:cloud9/environmentMembership:EnvironmentMembership"
    "aws:cloudcontrol/resource:Resource"
    "aws:cloudformation/cloudFormationType:CloudFormationType"
    "aws:cloudformation/stack:Stack"
    "aws:cloudformation/stackSet:StackSet"
    "aws:cloudformation/stackSetInstance:StackSetInstance"
    "aws:cloudfront/cachePolicy:CachePolicy"
    "aws:cloudfront/continuousDeploymentPolicy:ContinuousDeploymentPolicy"
    "aws:cloudfront/distribution:Distribution"
    "aws:cloudfront/fieldLevelEncryptionConfig:FieldLevelEncryptionConfig"
    "aws:cloudfront/fieldLevelEncryptionProfile:FieldLevelEncryptionProfile"
    "aws:cloudfront/function:Function"
    "aws:cloudfront/keyGroup:KeyGroup"
    "aws:cloudfront/keyValueStore:KeyValueStore"
    "aws:cloudfront/keyvaluestoreKey:KeyvaluestoreKey"
    "aws:cloudfront/monitoringSubscription:MonitoringSubscription"
    "aws:cloudfront/originAccessControl:OriginAccessControl"
    "aws:cloudfront/originAccessIdentity:OriginAccessIdentity"
    "aws:cloudfront/originRequestPolicy:OriginRequestPolicy"
    "aws:cloudfront/publicKey:PublicKey"
    "aws:cloudfront/realtimeLogConfig:RealtimeLogConfig"
    "aws:cloudfront/responseHeadersPolicy:ResponseHeadersPolicy"
    "aws:cloudhsmv2/cluster:Cluster"
    "aws:cloudhsmv2/hsm:Hsm"
    "aws:cloudsearch/domain:Domain"
    "aws:cloudsearch/domainServiceAccessPolicy:DomainServiceAccessPolicy"
    "aws:cloudtrail/eventDataStore:EventDataStore"
    "aws:cloudtrail/trail:Trail"
    "aws:cloudwatch/compositeAlarm:CompositeAlarm"
    "aws:cloudwatch/dashboard:Dashboard"
    "aws:cloudwatch/eventApiDestination:EventApiDestination"
    "aws:cloudwatch/eventArchive:EventArchive"
    "aws:cloudwatch/eventBus:EventBus"
    "aws:cloudwatch/eventBusPolicy:EventBusPolicy"
    "aws:cloudwatch/eventConnection:EventConnection"
    "aws:cloudwatch/eventEndpoint:EventEndpoint"
    "aws:cloudwatch/eventPermission:EventPermission"
    "aws:cloudwatch/eventRule:EventRule"
    "aws:cloudwatch/eventTarget:EventTarget"
    "aws:cloudwatch/internetMonitor:InternetMonitor"
    "aws:cloudwatch/logDataProtectionPolicy:LogDataProtectionPolicy"
    "aws:cloudwatch/logDestination:LogDestination"
    "aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy"
    "aws:cloudwatch/logGroup:LogGroup"
    "aws:cloudwatch/logMetricFilter:LogMetricFilter"
    "aws:cloudwatch/logResourcePolicy:LogResourcePolicy"
    "aws:cloudwatch/logStream:LogStream"
    "aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter"
    "aws:cloudwatch/metricAlarm:MetricAlarm"
    "aws:cloudwatch/metricStream:MetricStream"
    "aws:cloudwatch/queryDefinition:QueryDefinition"
    "aws:codeartifact/domain:Domain"
    "aws:codeartifact/domainPermissions:DomainPermissions"
    "aws:codeartifact/repository:Repository"
    "aws:codeartifact/repositoryPermissionsPolicy:RepositoryPermissionsPolicy"
    "aws:codebuild/project:Project"
    "aws:codebuild/reportGroup:ReportGroup"
    "aws:codebuild/resourcePolicy:ResourcePolicy"
    "aws:codebuild/sourceCredential:SourceCredential"
    "aws:codebuild/webhook:Webhook"
    "aws:codecatalyst/devEnvironment:DevEnvironment"
    "aws:codecatalyst/project:Project"
    "aws:codecatalyst/sourceRepository:SourceRepository"
    "aws:codecommit/approvalRuleTemplate:ApprovalRuleTemplate"
    "aws:codecommit/approvalRuleTemplateAssociation:ApprovalRuleTemplateAssociation"
    "aws:codecommit/repository:Repository"
    "aws:codecommit/trigger:Trigger"
    "aws:codedeploy/application:Application"
    "aws:codedeploy/deploymentConfig:DeploymentConfig"
    "aws:codedeploy/deploymentGroup:DeploymentGroup"
    "aws:codeguruprofiler/profilingGroup:ProfilingGroup"
    "aws:codegurureviewer/repositoryAssociation:RepositoryAssociation"
    "aws:codepipeline/customActionType:CustomActionType"
    "aws:codepipeline/pipeline:Pipeline"
    "aws:codepipeline/webhook:Webhook"
    "aws:codestarconnections/connection:Connection"
    "aws:codestarconnections/host:Host"
    "aws:codestarnotifications/notificationRule:NotificationRule"
    "aws:cognito/identityPool:IdentityPool"
    "aws:cognito/identityPoolProviderPrincipalTag:IdentityPoolProviderPrincipalTag"
    "aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment"
    "aws:cognito/identityProvider:IdentityProvider"
    "aws:cognito/managedUserPoolClient:ManagedUserPoolClient"
    "aws:cognito/resourceServer:ResourceServer"
    "aws:cognito/riskConfiguration:RiskConfiguration"
    "aws:cognito/user:User"
    "aws:cognito/userGroup:UserGroup"
    "aws:cognito/userInGroup:UserInGroup"
    "aws:cognito/userPool:UserPool"
    "aws:cognito/userPoolClient:UserPoolClient"
    "aws:cognito/userPoolDomain:UserPoolDomain"
    "aws:cognito/userPoolUICustomization:UserPoolUICustomization"
    "aws:comprehend/documentClassifier:DocumentClassifier"
    "aws:comprehend/entityRecognizer:EntityRecognizer"
    "aws:connect/botAssociation:BotAssociation"
    "aws:connect/contactFlow:ContactFlow"
    "aws:connect/contactFlowModule:ContactFlowModule"
    "aws:connect/hoursOfOperation:HoursOfOperation"
    "aws:connect/instance:Instance"
    "aws:connect/instanceStorageConfig:InstanceStorageConfig"
    "aws:connect/lambdaFunctionAssociation:LambdaFunctionAssociation"
    "aws:connect/phoneNumber:PhoneNumber"
    "aws:connect/queue:Queue"
    "aws:connect/quickConnect:QuickConnect"
    "aws:connect/routingProfile:RoutingProfile"
    "aws:connect/securityProfile:SecurityProfile"
    "aws:connect/user:User"
    "aws:connect/userHierarchyGroup:UserHierarchyGroup"
    "aws:connect/userHierarchyStructure:UserHierarchyStructure"
    "aws:connect/vocabulary:Vocabulary"
    "aws:controltower/controlTowerControl:ControlTowerControl"
    "aws:controltower/landingZone:LandingZone"
    "aws:costexplorer/anomalyMonitor:AnomalyMonitor"
    "aws:costexplorer/anomalySubscription:AnomalySubscription"
    "aws:costexplorer/costAllocationTag:CostAllocationTag"
    "aws:costexplorer/costCategory:CostCategory"
    "aws:cur/reportDefinition:ReportDefinition"
    "aws:customerprofiles/domain:Domain"
    "aws:customerprofiles/profile:Profile"
    "aws:dataexchange/dataSet:DataSet"
    "aws:dataexchange/revision:Revision"
    "aws:datapipeline/pipeline:Pipeline"
    "aws:datapipeline/pipelineDefinition:PipelineDefinition"
    "aws:datasync/agent:Agent"
    "aws:datasync/efsLocation:EfsLocation"
    "aws:datasync/fsxOpenZfsFileSystem:FsxOpenZfsFileSystem"
    "aws:datasync/locationAzureBlob:LocationAzureBlob"
    "aws:datasync/locationFsxLustre:LocationFsxLustre"
    "aws:datasync/locationFsxOntapFileSystem:LocationFsxOntapFileSystem"
    "aws:datasync/locationFsxWindows:LocationFsxWindows"
    "aws:datasync/locationHdfs:LocationHdfs"
    "aws:datasync/locationObjectStorage:LocationObjectStorage"
    "aws:datasync/locationSmb:LocationSmb"
    "aws:datasync/nfsLocation:NfsLocation"
    "aws:datasync/s3Location:S3Location"
    "aws:datasync/task:Task"
    "aws:dax/cluster:Cluster"
    "aws:dax/parameterGroup:ParameterGroup"
    "aws:dax/subnetGroup:SubnetGroup"
    "aws:detective/graph:Graph"
    "aws:detective/invitationAccepter:InvitationAccepter"
    "aws:detective/member:Member"
    "aws:detective/organizationAdminAccount:OrganizationAdminAccount"
    "aws:detective/organizationConfiguration:OrganizationConfiguration"
    "aws:devicefarm/devicePool:DevicePool"
    "aws:devicefarm/instanceProfile:InstanceProfile"
    "aws:devicefarm/networkProfile:NetworkProfile"
    "aws:devicefarm/project:Project"
    "aws:devicefarm/testGridProject:TestGridProject"
    "aws:devicefarm/upload:Upload"
    "aws:devopsguru/eventSourcesConfig:EventSourcesConfig"
    "aws:devopsguru/notificationChannel:NotificationChannel"
    "aws:devopsguru/resourceCollection:ResourceCollection"
    "aws:devopsguru/serviceIntegration:ServiceIntegration"
    "aws:directconnect/bgpPeer:BgpPeer"
    "aws:directconnect/connection:Connection"
    "aws:directconnect/connectionAssociation:ConnectionAssociation"
    "aws:directconnect/connectionConfirmation:ConnectionConfirmation"
    "aws:directconnect/gateway:Gateway"
    "aws:directconnect/gatewayAssociation:GatewayAssociation"
    "aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal"
    "aws:directconnect/hostedConnection:HostedConnection"
    "aws:directconnect/hostedPrivateVirtualInterface:HostedPrivateVirtualInterface"
    "aws:directconnect/hostedPrivateVirtualInterfaceAccepter:HostedPrivateVirtualInterfaceAccepter"
    "aws:directconnect/hostedPublicVirtualInterface:HostedPublicVirtualInterface"
    "aws:directconnect/hostedPublicVirtualInterfaceAccepter:HostedPublicVirtualInterfaceAccepter"
    "aws:directconnect/hostedTransitVirtualInterface:HostedTransitVirtualInterface"
    "aws:directconnect/hostedTransitVirtualInterfaceAcceptor:HostedTransitVirtualInterfaceAcceptor"
    "aws:directconnect/linkAggregationGroup:LinkAggregationGroup"
    "aws:directconnect/macsecKeyAssociation:MacsecKeyAssociation"
    "aws:directconnect/privateVirtualInterface:PrivateVirtualInterface"
    "aws:directconnect/publicVirtualInterface:PublicVirtualInterface"
    "aws:directconnect/transitVirtualInterface:TransitVirtualInterface"
    "aws:directoryservice/conditionalForwader:ConditionalForwader"
    "aws:directoryservice/directory:Directory"
    "aws:directoryservice/logService:LogService"
    "aws:directoryservice/radiusSettings:RadiusSettings"
    "aws:directoryservice/serviceRegion:ServiceRegion"
    "aws:directoryservice/sharedDirectory:SharedDirectory"
    "aws:directoryservice/sharedDirectoryAccepter:SharedDirectoryAccepter"
    "aws:directoryservice/trust:Trust"
    "aws:dlm/lifecyclePolicy:LifecyclePolicy"
    "aws:dms/certificate:Certificate"
    "aws:dms/endpoint:Endpoint"
    "aws:dms/eventSubscription:EventSubscription"
    "aws:dms/replicationConfig:ReplicationConfig"
    "aws:dms/replicationInstance:ReplicationInstance"
    "aws:dms/replicationSubnetGroup:ReplicationSubnetGroup"
    "aws:dms/replicationTask:ReplicationTask"
    "aws:dms/s3Endpoint:S3Endpoint"
    "aws:docdb/cluster:Cluster"
    "aws:docdb/clusterInstance:ClusterInstance"
    "aws:docdb/clusterParameterGroup:ClusterParameterGroup"
    "aws:docdb/clusterSnapshot:ClusterSnapshot"
    "aws:docdb/elasticCluster:ElasticCluster"
    "aws:docdb/eventSubscription:EventSubscription"
    "aws:docdb/globalCluster:GlobalCluster"
    "aws:docdb/subnetGroup:SubnetGroup"
    "aws:dynamodb/contributorInsights:ContributorInsights"
    "aws:dynamodb/globalTable:GlobalTable"
    "aws:dynamodb/kinesisStreamingDestination:KinesisStreamingDestination"
    "aws:dynamodb/resourcePolicy:ResourcePolicy"
    "aws:dynamodb/table:Table"
    "aws:dynamodb/tableExport:TableExport"
    "aws:dynamodb/tableItem:TableItem"
    "aws:dynamodb/tableReplica:TableReplica"
    "aws:dynamodb/tag:Tag"
    "aws:ebs/defaultKmsKey:DefaultKmsKey"
    "aws:ebs/encryptionByDefault:EncryptionByDefault"
    "aws:ebs/fastSnapshotRestore:FastSnapshotRestore"
    "aws:ebs/snapshot:Snapshot"
    "aws:ebs/snapshotCopy:SnapshotCopy"
    "aws:ebs/snapshotImport:SnapshotImport"
    "aws:ebs/volume:Volume"
    "aws:ec2/ami:Ami"
    "aws:ec2/amiCopy:AmiCopy"
    "aws:ec2/amiFromInstance:AmiFromInstance"
    "aws:ec2/amiLaunchPermission:AmiLaunchPermission"
    "aws:ec2/availabilityZoneGroup:AvailabilityZoneGroup"
    "aws:ec2/capacityReservation:CapacityReservation"
    "aws:ec2/carrierGateway:CarrierGateway"
    "aws:ec2/customerGateway:CustomerGateway"
    "aws:ec2/dedicatedHost:DedicatedHost"
    "aws:ec2/defaultNetworkAcl:DefaultNetworkAcl"
    "aws:ec2/defaultRouteTable:DefaultRouteTable"
    "aws:ec2/defaultSecurityGroup:DefaultSecurityGroup"
    "aws:ec2/defaultSubnet:DefaultSubnet"
    "aws:ec2/defaultVpc:DefaultVpc"
    "aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions"
    "aws:ec2/egressOnlyInternetGateway:EgressOnlyInternetGateway"
    "aws:ec2/eip:Eip"
    "aws:ec2/eipAssociation:EipAssociation"
    "aws:ec2/eipDomainName:EipDomainName"
    "aws:ec2/fleet:Fleet"
    "aws:ec2/flowLog:FlowLog"
    "aws:ec2/imageBlockPublicAccess:ImageBlockPublicAccess"
    "aws:ec2/instance:Instance"
    "aws:ec2/instanceMetadataDefaults:InstanceMetadataDefaults"
    "aws:ec2/internetGateway:InternetGateway"
    "aws:ec2/internetGatewayAttachment:InternetGatewayAttachment"
    "aws:ec2/keyPair:KeyPair"
    "aws:ec2/launchConfiguration:LaunchConfiguration"
    "aws:ec2/launchTemplate:LaunchTemplate"
    "aws:ec2/localGatewayRoute:LocalGatewayRoute"
    "aws:ec2/localGatewayRouteTableVpcAssociation:LocalGatewayRouteTableVpcAssociation"
    "aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation"
    "aws:ec2/managedPrefixList:ManagedPrefixList"
    "aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry"
    "aws:ec2/natGateway:NatGateway"
    "aws:ec2/networkAcl:NetworkAcl"
    "aws:ec2/networkAclAssociation:NetworkAclAssociation"
    "aws:ec2/networkAclRule:NetworkAclRule"
    "aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis"
    "aws:ec2/networkInsightsPath:NetworkInsightsPath"
    "aws:ec2/networkInterface:NetworkInterface"
    "aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment"
    "aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment"
    "aws:ec2/peeringConnectionOptions:PeeringConnectionOptions"
    "aws:ec2/placementGroup:PlacementGroup"
    "aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy"
    "aws:ec2/route:Route"
    "aws:ec2/routeTable:RouteTable"
    "aws:ec2/routeTableAssociation:RouteTableAssociation"
    "aws:ec2/securityGroup:SecurityGroup"
    "aws:ec2/securityGroupAssociation:SecurityGroupAssociation"
    "aws:ec2/securityGroupRule:SecurityGroupRule"
    "aws:ec2/serialConsoleAccess:SerialConsoleAccess"
    "aws:ec2/snapshotCreateVolumePermission:SnapshotCreateVolumePermission"
    "aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription"
    "aws:ec2/spotFleetRequest:SpotFleetRequest"
    "aws:ec2/spotInstanceRequest:SpotInstanceRequest"
    "aws:ec2/subnet:Subnet"
    "aws:ec2/subnetCidrReservation:SubnetCidrReservation"
    "aws:ec2/tag:Tag"
    "aws:ec2/trafficMirrorFilter:TrafficMirrorFilter"
    "aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule"
    "aws:ec2/trafficMirrorSession:TrafficMirrorSession"
    "aws:ec2/trafficMirrorTarget:TrafficMirrorTarget"
    "aws:ec2/volumeAttachment:VolumeAttachment"
    "aws:ec2/vpc:Vpc"
    "aws:ec2/vpcDhcpOptions:VpcDhcpOptions"
    "aws:ec2/vpcDhcpOptionsAssociation:VpcDhcpOptionsAssociation"
    "aws:ec2/vpcEndpoint:VpcEndpoint"
    "aws:ec2/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter"
    "aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification"
    "aws:ec2/vpcEndpointPolicy:VpcEndpointPolicy"
    "aws:ec2/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation"
    "aws:ec2/vpcEndpointService:VpcEndpointService"
    "aws:ec2/vpcEndpointServiceAllowedPrinciple:VpcEndpointServiceAllowedPrinciple"
    "aws:ec2/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation"
    "aws:ec2/vpcIpam:VpcIpam"
    "aws:ec2/vpcIpamOrganizationAdminAccount:VpcIpamOrganizationAdminAccount"
    "aws:ec2/vpcIpamPool:VpcIpamPool"
    "aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr"
    "aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation"
    "aws:ec2/vpcIpamPreviewNextCidr:VpcIpamPreviewNextCidr"
    "aws:ec2/vpcIpamResourceDiscovery:VpcIpamResourceDiscovery"
    "aws:ec2/vpcIpamResourceDiscoveryAssociation:VpcIpamResourceDiscoveryAssociation"
    "aws:ec2/vpcIpamScope:VpcIpamScope"
    "aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation"
    "aws:ec2/vpcIpv6CidrBlockAssociation:VpcIpv6CidrBlockAssociation"
    "aws:ec2/vpcNetworkPerformanceMetricSubscription:VpcNetworkPerformanceMetricSubscription"
    "aws:ec2/vpcPeeringConnection:VpcPeeringConnection"
    "aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter"
    "aws:ec2/vpnConnection:VpnConnection"
    "aws:ec2/vpnConnectionRoute:VpnConnectionRoute"
    "aws:ec2/vpnGateway:VpnGateway"
    "aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment"
    "aws:ec2/vpnGatewayRoutePropagation:VpnGatewayRoutePropagation"
    "aws:ec2clientvpn/authorizationRule:AuthorizationRule"
    "aws:ec2clientvpn/endpoint:Endpoint"
    "aws:ec2clientvpn/networkAssociation:NetworkAssociation"
    "aws:ec2clientvpn/route:Route"
    "aws:ec2transitgateway/connect:Connect"
    "aws:ec2transitgateway/connectPeer:ConnectPeer"
    "aws:ec2transitgateway/instanceConnectEndpoint:InstanceConnectEndpoint"
    "aws:ec2transitgateway/instanceState:InstanceState"
    "aws:ec2transitgateway/multicastDomain:MulticastDomain"
    "aws:ec2transitgateway/multicastDomainAssociation:MulticastDomainAssociation"
    "aws:ec2transitgateway/multicastGroupMember:MulticastGroupMember"
    "aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource"
    "aws:ec2transitgateway/peeringAttachment:PeeringAttachment"
    "aws:ec2transitgateway/peeringAttachmentAccepter:PeeringAttachmentAccepter"
    "aws:ec2transitgateway/policyTable:PolicyTable"
    "aws:ec2transitgateway/policyTableAssociation:PolicyTableAssociation"
    "aws:ec2transitgateway/prefixListReference:PrefixListReference"
    "aws:ec2transitgateway/route:Route"
    "aws:ec2transitgateway/routeTable:RouteTable"
    "aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation"
    "aws:ec2transitgateway/routeTablePropagation:RouteTablePropagation"
    "aws:ec2transitgateway/transitGateway:TransitGateway"
    "aws:ec2transitgateway/vpcAttachment:VpcAttachment"
    "aws:ec2transitgateway/vpcAttachmentAccepter:VpcAttachmentAccepter"
    "aws:ecr/lifecyclePolicy:LifecyclePolicy"
    "aws:ecr/pullThroughCacheRule:PullThroughCacheRule"
    "aws:ecr/registryPolicy:RegistryPolicy"
    "aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration"
    "aws:ecr/replicationConfiguration:ReplicationConfiguration"
    "aws:ecr/repository:Repository"
    "aws:ecr/repositoryPolicy:RepositoryPolicy"
    "aws:ecrpublic/repository:Repository"
    "aws:ecrpublic/repositoryPolicy:RepositoryPolicy"
    "aws:ecs/accountSettingDefault:AccountSettingDefault"
    "aws:ecs/capacityProvider:CapacityProvider"
    "aws:ecs/cluster:Cluster"
    "aws:ecs/clusterCapacityProviders:ClusterCapacityProviders"
    "aws:ecs/service:Service"
    "aws:ecs/tag:Tag"
    "aws:ecs/taskDefinition:TaskDefinition"
    "aws:ecs/taskSet:TaskSet"
    "aws:efs/accessPoint:AccessPoint"
    "aws:efs/backupPolicy:BackupPolicy"
    "aws:efs/fileSystem:FileSystem"
    "aws:efs/fileSystemPolicy:FileSystemPolicy"
    "aws:efs/mountTarget:MountTarget"
    "aws:efs/replicationConfiguration:ReplicationConfiguration"
    "aws:eks/accessEntry:AccessEntry"
    "aws:eks/accessPolicyAssociation:AccessPolicyAssociation"
    "aws:eks/addon:Addon"
    "aws:eks/cluster:Cluster"
    "aws:eks/fargateProfile:FargateProfile"
    "aws:eks/identityProviderConfig:IdentityProviderConfig"
    "aws:eks/nodeGroup:NodeGroup"
    "aws:eks/podIdentityAssociation:PodIdentityAssociation"
    "aws:elasticache/cluster:Cluster"
    "aws:elasticache/globalReplicationGroup:GlobalReplicationGroup"
    "aws:elasticache/parameterGroup:ParameterGroup"
    "aws:elasticache/replicationGroup:ReplicationGroup"
    "aws:elasticache/serverlessCache:ServerlessCache"
    "aws:elasticache/subnetGroup:SubnetGroup"
    "aws:elasticache/user:User"
    "aws:elasticache/userGroup:UserGroup"
    "aws:elasticache/userGroupAssociation:UserGroupAssociation"
    "aws:elasticbeanstalk/application:Application"
    "aws:elasticbeanstalk/applicationVersion:ApplicationVersion"
    "aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate"
    "aws:elasticbeanstalk/environment:Environment"
    "aws:elasticsearch/domain:Domain"
    "aws:elasticsearch/domainPolicy:DomainPolicy"
    "aws:elasticsearch/domainSamlOptions:DomainSamlOptions"
    "aws:elasticsearch/vpcEndpoint:VpcEndpoint"
    "aws:elastictranscoder/pipeline:Pipeline"
    "aws:elastictranscoder/preset:Preset"
    "aws:elb/appCookieStickinessPolicy:AppCookieStickinessPolicy"
    "aws:elb/attachment:Attachment"
    "aws:elb/listenerPolicy:ListenerPolicy"
    "aws:elb/loadBalancer:LoadBalancer"
    "aws:elb/loadBalancerBackendServerPolicy:LoadBalancerBackendServerPolicy"
    "aws:elb/loadBalancerCookieStickinessPolicy:LoadBalancerCookieStickinessPolicy"
    "aws:elb/loadBalancerPolicy:LoadBalancerPolicy"
    "aws:elb/sslNegotiationPolicy:SslNegotiationPolicy"
    "aws:emr/blockPublicAccessConfiguration:BlockPublicAccessConfiguration"
    "aws:emr/cluster:Cluster"
    "aws:emr/instanceFleet:InstanceFleet"
    "aws:emr/instanceGroup:InstanceGroup"
    "aws:emr/managedScalingPolicy:ManagedScalingPolicy"
    "aws:emr/securityConfiguration:SecurityConfiguration"
    "aws:emr/studio:Studio"
    "aws:emr/studioSessionMapping:StudioSessionMapping"
    "aws:emrcontainers/jobTemplate:JobTemplate"
    "aws:emrcontainers/virtualCluster:VirtualCluster"
    "aws:emrserverless/application:Application"
    "aws:evidently/feature:Feature"
    "aws:evidently/launch:Launch"
    "aws:evidently/project:Project"
    "aws:evidently/segment:Segment"
    "aws:finspace/kxCluster:KxCluster"
    "aws:finspace/kxDatabase:KxDatabase"
    "aws:finspace/kxDataview:KxDataview"
    "aws:finspace/kxEnvironment:KxEnvironment"
    "aws:finspace/kxScalingGroup:KxScalingGroup"
    "aws:finspace/kxUser:KxUser"
    "aws:finspace/kxVolume:KxVolume"
    "aws:fis/experimentTemplate:ExperimentTemplate"
    "aws:fms/adminAccount:AdminAccount"
    "aws:fms/policy:Policy"
    "aws:fsx/backup:Backup"
    "aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation"
    "aws:fsx/fileCache:FileCache"
    "aws:fsx/lustreFileSystem:LustreFileSystem"
    "aws:fsx/ontapFileSystem:OntapFileSystem"
    "aws:fsx/ontapStorageVirtualMachine:OntapStorageVirtualMachine"
    "aws:fsx/ontapVolume:OntapVolume"
    "aws:fsx/openZfsFileSystem:OpenZfsFileSystem"
    "aws:fsx/openZfsSnapshot:OpenZfsSnapshot"
    "aws:fsx/openZfsVolume:OpenZfsVolume"
    "aws:fsx/windowsFileSystem:WindowsFileSystem"
    "aws:gamelift/alias:Alias"
    "aws:gamelift/build:Build"
    "aws:gamelift/fleet:Fleet"
    "aws:gamelift/gameServerGroup:GameServerGroup"
    "aws:gamelift/gameSessionQueue:GameSessionQueue"
    "aws:gamelift/matchmakingConfiguration:MatchmakingConfiguration"
    "aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet"
    "aws:gamelift/script:Script"
    "aws:glacier/vault:Vault"
    "aws:glacier/vaultLock:VaultLock"
    "aws:globalaccelerator/accelerator:Accelerator"
    "aws:globalaccelerator/crossAccountAttachment:CrossAccountAttachment"
    "aws:globalaccelerator/customRoutingAccelerator:CustomRoutingAccelerator"
    "aws:globalaccelerator/customRoutingEndpointGroup:CustomRoutingEndpointGroup"
    "aws:globalaccelerator/customRoutingListener:CustomRoutingListener"
    "aws:globalaccelerator/endpointGroup:EndpointGroup"
    "aws:globalaccelerator/listener:Listener"
    "aws:glue/catalogDatabase:CatalogDatabase"
    "aws:glue/catalogTable:CatalogTable"
    "aws:glue/classifier:Classifier"
    "aws:glue/connection:Connection"
    "aws:glue/crawler:Crawler"
    "aws:glue/dataCatalogEncryptionSettings:DataCatalogEncryptionSettings"
    "aws:glue/dataQualityRuleset:DataQualityRuleset"
    "aws:glue/devEndpoint:DevEndpoint"
    "aws:glue/job:Job"
    "aws:glue/mLTransform:MLTransform"
    "aws:glue/partition:Partition"
    "aws:glue/partitionIndex:PartitionIndex"
    "aws:glue/registry:Registry"
    "aws:glue/resourcePolicy:ResourcePolicy"
    "aws:glue/schema:Schema"
    "aws:glue/securityConfiguration:SecurityConfiguration"
    "aws:glue/trigger:Trigger"
    "aws:glue/userDefinedFunction:UserDefinedFunction"
    "aws:glue/workflow:Workflow"
    "aws:grafana/licenseAssociation:LicenseAssociation"
    "aws:grafana/roleAssociation:RoleAssociation"
    "aws:grafana/workspace:Workspace"
    "aws:grafana/workspaceApiKey:WorkspaceApiKey"
    "aws:grafana/workspaceSamlConfiguration:WorkspaceSamlConfiguration"
    "aws:guardduty/detector:Detector"
    "aws:guardduty/detectorFeature:DetectorFeature"
    "aws:guardduty/filter:Filter"
    "aws:guardduty/iPSet:IPSet"
    "aws:guardduty/inviteAccepter:InviteAccepter"
    "aws:guardduty/member:Member"
    "aws:guardduty/organizationAdminAccount:OrganizationAdminAccount"
    "aws:guardduty/organizationConfiguration:OrganizationConfiguration"
    "aws:guardduty/organizationConfigurationFeature:OrganizationConfigurationFeature"
    "aws:guardduty/publishingDestination:PublishingDestination"
    "aws:guardduty/threatIntelSet:ThreatIntelSet"
    "aws:iam/accessKey:AccessKey"
    "aws:iam/accountAlias:AccountAlias"
    "aws:iam/accountPasswordPolicy:AccountPasswordPolicy"
    "aws:iam/group:Group"
    "aws:iam/groupMembership:GroupMembership"
    "aws:iam/groupPolicy:GroupPolicy"
    "aws:iam/groupPolicyAttachment:GroupPolicyAttachment"
    "aws:iam/instanceProfile:InstanceProfile"
    "aws:iam/openIdConnectProvider:OpenIdConnectProvider"
    "aws:iam/policy:Policy"
    "aws:iam/policyAttachment:PolicyAttachment"
    "aws:iam/role:Role"
    "aws:iam/rolePolicy:RolePolicy"
    "aws:iam/rolePolicyAttachment:RolePolicyAttachment"
    "aws:iam/samlProvider:SamlProvider"
    "aws:iam/securityTokenServicePreferences:SecurityTokenServicePreferences"
    "aws:iam/serverCertificate:ServerCertificate"
    "aws:iam/serviceLinkedRole:ServiceLinkedRole"
    "aws:iam/serviceSpecificCredential:ServiceSpecificCredential"
    "aws:iam/signingCertificate:SigningCertificate"
    "aws:iam/sshKey:SshKey"
    "aws:iam/user:User"
    "aws:iam/userGroupMembership:UserGroupMembership"
    "aws:iam/userLoginProfile:UserLoginProfile"
    "aws:iam/userPolicy:UserPolicy"
    "aws:iam/userPolicyAttachment:UserPolicyAttachment"
    "aws:iam/virtualMfaDevice:VirtualMfaDevice"
    "aws:identitystore/group:Group"
    "aws:identitystore/groupMembership:GroupMembership"
    "aws:identitystore/user:User"
    "aws:imagebuilder/component:Component"
    "aws:imagebuilder/containerRecipe:ContainerRecipe"
    "aws:imagebuilder/distributionConfiguration:DistributionConfiguration"
    "aws:imagebuilder/image:Image"
    "aws:imagebuilder/imagePipeline:ImagePipeline"
    "aws:imagebuilder/imageRecipe:ImageRecipe"
    "aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration"
    "aws:imagebuilder/workflow:Workflow"
    "aws:inspector/assessmentTarget:AssessmentTarget"
    "aws:inspector/assessmentTemplate:AssessmentTemplate"
    "aws:inspector/resourceGroup:ResourceGroup"
    "aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount"
    "aws:inspector2/enabler:Enabler"
    "aws:inspector2/memberAssociation:MemberAssociation"
    "aws:inspector2/organizationConfiguration:OrganizationConfiguration"
    "aws:iot/authorizer:Authorizer"
    "aws:iot/billingGroup:BillingGroup"
    "aws:iot/caCertificate:CaCertificate"
    "aws:iot/certificate:Certificate"
    "aws:iot/domainConfiguration:DomainConfiguration"
    "aws:iot/eventConfigurations:EventConfigurations"
    "aws:iot/indexingConfiguration:IndexingConfiguration"
    "aws:iot/loggingOptions:LoggingOptions"
    "aws:iot/policy:Policy"
    "aws:iot/policyAttachment:PolicyAttachment"
    "aws:iot/provisioningTemplate:ProvisioningTemplate"
    "aws:iot/roleAlias:RoleAlias"
    "aws:iot/thing:Thing"
    "aws:iot/thingGroup:ThingGroup"
    "aws:iot/thingGroupMembership:ThingGroupMembership"
    "aws:iot/thingPrincipalAttachment:ThingPrincipalAttachment"
    "aws:iot/thingType:ThingType"
    "aws:iot/topicRule:TopicRule"
    "aws:iot/topicRuleDestination:TopicRuleDestination"
    "aws:ivs/channel:Channel"
    "aws:ivs/playbackKeyPair:PlaybackKeyPair"
    "aws:ivs/recordingConfiguration:RecordingConfiguration"
    "aws:ivschat/loggingConfiguration:LoggingConfiguration"
    "aws:ivschat/room:Room"
    "aws:kendra/dataSource:DataSource"
    "aws:kendra/experience:Experience"
    "aws:kendra/faq:Faq"
    "aws:kendra/index:Index"
    "aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList"
    "aws:kendra/thesaurus:Thesaurus"
    "aws:keyspaces/keyspace:Keyspace"
    "aws:keyspaces/table:Table"
    "aws:kinesis/analyticsApplication:AnalyticsApplication"
    "aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream"
    "aws:kinesis/resourcePolicy:ResourcePolicy"
    "aws:kinesis/stream:Stream"
    "aws:kinesis/streamConsumer:StreamConsumer"
    "aws:kinesis/videoStream:VideoStream"
    "aws:kinesisanalyticsv2/application:Application"
    "aws:kinesisanalyticsv2/applicationSnapshot:ApplicationSnapshot"
    "aws:kms/alias:Alias"
    "aws:kms/ciphertext:Ciphertext"
    "aws:kms/customKeyStore:CustomKeyStore"
    "aws:kms/externalKey:ExternalKey"
    "aws:kms/grant:Grant"
    "aws:kms/key:Key"
    "aws:kms/keyPolicy:KeyPolicy"
    "aws:kms/replicaExternalKey:ReplicaExternalKey"
    "aws:kms/replicaKey:ReplicaKey"
    "aws:lakeformation/dataCellsFilter:DataCellsFilter"
    "aws:lakeformation/dataLakeSettings:DataLakeSettings"
    "aws:lakeformation/lfTag:LfTag"
    "aws:lakeformation/permissions:Permissions"
    "aws:lakeformation/resource:Resource"
    "aws:lakeformation/resourceLfTag:ResourceLfTag"
    "aws:lakeformation/resourceLfTags:ResourceLfTags"
    "aws:lambda/alias:Alias"
    "aws:lambda/codeSigningConfig:CodeSigningConfig"
    "aws:lambda/eventSourceMapping:EventSourceMapping"
    "aws:lambda/function:Function"
    "aws:lambda/functionEventInvokeConfig:FunctionEventInvokeConfig"
    "aws:lambda/functionUrl:FunctionUrl"
    "aws:lambda/invocation:Invocation"
    "aws:lambda/layerVersion:LayerVersion"
    "aws:lambda/layerVersionPermission:LayerVersionPermission"
    "aws:lambda/permission:Permission"
    "aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig"
    "aws:lb/listener:Listener"
    "aws:lb/listenerCertificate:ListenerCertificate"
    "aws:lb/listenerRule:ListenerRule"
    "aws:lb/loadBalancer:LoadBalancer"
    "aws:lb/targetGroup:TargetGroup"
    "aws:lb/targetGroupAttachment:TargetGroupAttachment"
    "aws:lb/trustStore:TrustStore"
    "aws:lb/trustStoreRevocation:TrustStoreRevocation"
    "aws:lex/bot:Bot"
    "aws:lex/botAlias:BotAlias"
    "aws:lex/intent:Intent"
    "aws:lex/slotType:SlotType"
    "aws:lex/v2modelsBot:V2modelsBot"
    "aws:lex/v2modelsBotLocale:V2modelsBotLocale"
    "aws:lex/v2modelsBotVersion:V2modelsBotVersion"
    "aws:lex/v2modelsIntent:V2modelsIntent"
    "aws:lex/v2modelsSlot:V2modelsSlot"
    "aws:lex/v2modelsSlotType:V2modelsSlotType"
    "aws:licensemanager/association:Association"
    "aws:licensemanager/licenseConfiguration:LicenseConfiguration"
    "aws:licensemanager/licenseGrant:LicenseGrant"
    "aws:licensemanager/licenseGrantAccepter:LicenseGrantAccepter"
    "aws:lightsail/bucket:Bucket"
    "aws:lightsail/bucketAccessKey:BucketAccessKey"
    "aws:lightsail/bucketResourceAccess:BucketResourceAccess"
    "aws:lightsail/certificate:Certificate"
    "aws:lightsail/containerService:ContainerService"
    "aws:lightsail/containerServiceDeploymentVersion:ContainerServiceDeploymentVersion"
    "aws:lightsail/database:Database"
    "aws:lightsail/disk:Disk"
    "aws:lightsail/disk_attachment:Disk_attachment"
    "aws:lightsail/distribution:Distribution"
    "aws:lightsail/domain:Domain"
    "aws:lightsail/domainEntry:DomainEntry"
    "aws:lightsail/instance:Instance"
    "aws:lightsail/instancePublicPorts:InstancePublicPorts"
    "aws:lightsail/keyPair:KeyPair"
    "aws:lightsail/lb:Lb"
    "aws:lightsail/lbAttachment:LbAttachment"
    "aws:lightsail/lbCertificate:LbCertificate"
    "aws:lightsail/lbCertificateAttachment:LbCertificateAttachment"
    "aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy"
    "aws:lightsail/lbStickinessPolicy:LbStickinessPolicy"
    "aws:lightsail/staticIp:StaticIp"
    "aws:lightsail/staticIpAttachment:StaticIpAttachment"
    "aws:location/geofenceCollection:GeofenceCollection"
    "aws:location/map:Map"
    "aws:location/placeIndex:PlaceIndex"
    "aws:location/routeCalculation:RouteCalculation"
    "aws:location/tracker:Tracker"
    "aws:location/trackerAssociation:TrackerAssociation"
    "aws:m2/application:Application"
    "aws:m2/deployment:Deployment"
    "aws:m2/environment:Environment"
    "aws:macie/customDataIdentifier:CustomDataIdentifier"
    "aws:macie/findingsFilter:FindingsFilter"
    "aws:macie2/account:Account"
    "aws:macie2/classificationExportConfiguration:ClassificationExportConfiguration"
    "aws:macie2/classificationJob:ClassificationJob"
    "aws:macie2/invitationAccepter:InvitationAccepter"
    "aws:macie2/member:Member"
    "aws:macie2/organizationAdminAccount:OrganizationAdminAccount"
    "aws:mediaconvert/queue:Queue"
    "aws:medialive/channel:Channel"
    "aws:medialive/input:Input"
    "aws:medialive/inputSecurityGroup:InputSecurityGroup"
    "aws:medialive/multiplex:Multiplex"
    "aws:medialive/multiplexProgram:MultiplexProgram"
    "aws:mediapackage/channel:Channel"
    "aws:mediastore/container:Container"
    "aws:mediastore/containerPolicy:ContainerPolicy"
    "aws:memorydb/acl:Acl"
    "aws:memorydb/cluster:Cluster"
    "aws:memorydb/parameterGroup:ParameterGroup"
    "aws:memorydb/snapshot:Snapshot"
    "aws:memorydb/subnetGroup:SubnetGroup"
    "aws:memorydb/user:User"
    "aws:mq/broker:Broker"
    "aws:mq/configuration:Configuration"
    "aws:msk/cluster:Cluster"
    "aws:msk/clusterPolicy:ClusterPolicy"
    "aws:msk/configuration:Configuration"
    "aws:msk/replicator:Replicator"
    "aws:msk/scramSecretAssociation:ScramSecretAssociation"
    "aws:msk/serverlessCluster:ServerlessCluster"
    "aws:msk/vpcConnection:VpcConnection"
    "aws:mskconnect/connector:Connector"
    "aws:mskconnect/customPlugin:CustomPlugin"
    "aws:mskconnect/workerConfiguration:WorkerConfiguration"
    "aws:mwaa/environment:Environment"
    "aws:neptune/cluster:Cluster"
    "aws:neptune/clusterEndpoint:ClusterEndpoint"
    "aws:neptune/clusterInstance:ClusterInstance"
    "aws:neptune/clusterParameterGroup:ClusterParameterGroup"
    "aws:neptune/clusterSnapshot:ClusterSnapshot"
    "aws:neptune/eventSubscription:EventSubscription"
    "aws:neptune/globalCluster:GlobalCluster"
    "aws:neptune/parameterGroup:ParameterGroup"
    "aws:neptune/subnetGroup:SubnetGroup"
    "aws:networkfirewall/firewall:Firewall"
    "aws:networkfirewall/firewallPolicy:FirewallPolicy"
    "aws:networkfirewall/loggingConfiguration:LoggingConfiguration"
    "aws:networkfirewall/resourcePolicy:ResourcePolicy"
    "aws:networkfirewall/ruleGroup:RuleGroup"
    "aws:networkmanager/attachmentAccepter:AttachmentAccepter"
    "aws:networkmanager/connectAttachment:ConnectAttachment"
    "aws:networkmanager/connectPeer:ConnectPeer"
    "aws:networkmanager/connection:Connection"
    "aws:networkmanager/coreNetwork:CoreNetwork"
    "aws:networkmanager/coreNetworkPolicyAttachment:CoreNetworkPolicyAttachment"
    "aws:networkmanager/customerGatewayAssociation:CustomerGatewayAssociation"
    "aws:networkmanager/device:Device"
    "aws:networkmanager/globalNetwork:GlobalNetwork"
    "aws:networkmanager/link:Link"
    "aws:networkmanager/linkAssociation:LinkAssociation"
    "aws:networkmanager/site:Site"
    "aws:networkmanager/siteToSiteVpnAttachment:SiteToSiteVpnAttachment"
    "aws:networkmanager/transitGatewayConnectPeerAssociation:TransitGatewayConnectPeerAssociation"
    "aws:networkmanager/transitGatewayPeering:TransitGatewayPeering"
    "aws:networkmanager/transitGatewayRegistration:TransitGatewayRegistration"
    "aws:networkmanager/transitGatewayRouteTableAttachment:TransitGatewayRouteTableAttachment"
    "aws:networkmanager/vpcAttachment:VpcAttachment"
    "aws:oam/link:Link"
    "aws:oam/sink:Sink"
    "aws:oam/sinkPolicy:SinkPolicy"
    "aws:opensearch/domain:Domain"
    "aws:opensearch/domainPolicy:DomainPolicy"
    "aws:opensearch/domainSamlOptions:DomainSamlOptions"
    "aws:opensearch/inboundConnectionAccepter:InboundConnectionAccepter"
    "aws:opensearch/outboundConnection:OutboundConnection"
    "aws:opensearch/package:Package"
    "aws:opensearch/packageAssociation:PackageAssociation"
    "aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy"
    "aws:opensearch/serverlessCollection:ServerlessCollection"
    "aws:opensearch/serverlessLifecyclePolicy:ServerlessLifecyclePolicy"
    "aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig"
    "aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy"
    "aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint"
    "aws:opensearch/vpcEndpoint:VpcEndpoint"
    "aws:opensearchingest/pipeline:Pipeline"
    "aws:opsworks/application:Application"
    "aws:opsworks/customLayer:CustomLayer"
    "aws:opsworks/ecsClusterLayer:EcsClusterLayer"
    "aws:opsworks/gangliaLayer:GangliaLayer"
    "aws:opsworks/haproxyLayer:HaproxyLayer"
    "aws:opsworks/instance:Instance"
    "aws:opsworks/javaAppLayer:JavaAppLayer"
    "aws:opsworks/memcachedLayer:MemcachedLayer"
    "aws:opsworks/mysqlLayer:MysqlLayer"
    "aws:opsworks/nodejsAppLayer:NodejsAppLayer"
    "aws:opsworks/permission:Permission"
    "aws:opsworks/phpAppLayer:PhpAppLayer"
    "aws:opsworks/railsAppLayer:RailsAppLayer"
    "aws:opsworks/rdsDbInstance:RdsDbInstance"
    "aws:opsworks/stack:Stack"
    "aws:opsworks/staticWebLayer:StaticWebLayer"
    "aws:opsworks/userProfile:UserProfile"
    "aws:organizations/account:Account"
    "aws:organizations/delegatedAdministrator:DelegatedAdministrator"
    "aws:organizations/organization:Organization"
    "aws:organizations/organizationalUnit:OrganizationalUnit"
    "aws:organizations/policy:Policy"
    "aws:organizations/policyAttachment:PolicyAttachment"
    "aws:organizations/resourcePolicy:ResourcePolicy"
    "aws:pinpoint/admChannel:AdmChannel"
    "aws:pinpoint/apnsChannel:ApnsChannel"
    "aws:pinpoint/apnsSandboxChannel:ApnsSandboxChannel"
    "aws:pinpoint/apnsVoipChannel:ApnsVoipChannel"
    "aws:pinpoint/apnsVoipSandboxChannel:ApnsVoipSandboxChannel"
    "aws:pinpoint/app:App"
    "aws:pinpoint/baiduChannel:BaiduChannel"
    "aws:pinpoint/emailChannel:EmailChannel"
    "aws:pinpoint/eventStream:EventStream"
    "aws:pinpoint/gcmChannel:GcmChannel"
    "aws:pinpoint/smsChannel:SmsChannel"
    "aws:pipes/pipe:Pipe"
    "aws:qldb/ledger:Ledger"
    "aws:qldb/stream:Stream"
    "aws:quicksight/accountSubscription:AccountSubscription"
    "aws:quicksight/analysis:Analysis"
    "aws:quicksight/dashboard:Dashboard"
    "aws:quicksight/dataSet:DataSet"
    "aws:quicksight/dataSource:DataSource"
    "aws:quicksight/folder:Folder"
    "aws:quicksight/folderMembership:FolderMembership"
    "aws:quicksight/group:Group"
    "aws:quicksight/groupMembership:GroupMembership"
    "aws:quicksight/iamPolicyAssignment:IamPolicyAssignment"
    "aws:quicksight/ingestion:Ingestion"
    "aws:quicksight/namespace:Namespace"
    "aws:quicksight/refreshSchedule:RefreshSchedule"
    "aws:quicksight/template:Template"
    "aws:quicksight/templateAlias:TemplateAlias"
    "aws:quicksight/theme:Theme"
    "aws:quicksight/user:User"
    "aws:quicksight/vpcConnection:VpcConnection"
    "aws:ram/principalAssociation:PrincipalAssociation"
    "aws:ram/resourceAssociation:ResourceAssociation"
    "aws:ram/resourceShare:ResourceShare"
    "aws:ram/resourceShareAccepter:ResourceShareAccepter"
    "aws:ram/sharingWithOrganization:SharingWithOrganization"
    "aws:rbin/rule:Rule"
    "aws:rds/cluster:Cluster"
    "aws:rds/clusterActivityStream:ClusterActivityStream"
    "aws:rds/clusterEndpoint:ClusterEndpoint"
    "aws:rds/clusterInstance:ClusterInstance"
    "aws:rds/clusterParameterGroup:ClusterParameterGroup"
    "aws:rds/clusterRoleAssociation:ClusterRoleAssociation"
    "aws:rds/clusterSnapshot:ClusterSnapshot"
    "aws:rds/customDbEngineVersion:CustomDbEngineVersion"
    "aws:rds/eventSubscription:EventSubscription"
    "aws:rds/exportTask:ExportTask"
    "aws:rds/globalCluster:GlobalCluster"
    "aws:rds/instance:Instance"
    "aws:rds/instanceAutomatedBackupsReplication:InstanceAutomatedBackupsReplication"
    "aws:rds/optionGroup:OptionGroup"
    "aws:rds/parameterGroup:ParameterGroup"
    "aws:rds/proxy:Proxy"
    "aws:rds/proxyDefaultTargetGroup:ProxyDefaultTargetGroup"
    "aws:rds/proxyEndpoint:ProxyEndpoint"
    "aws:rds/proxyTarget:ProxyTarget"
    "aws:rds/reservedInstance:ReservedInstance"
    "aws:rds/roleAssociation:RoleAssociation"
    "aws:rds/snapshot:Snapshot"
    "aws:rds/snapshotCopy:SnapshotCopy"
    "aws:rds/subnetGroup:SubnetGroup"
    "aws:redshift/authenticationProfile:AuthenticationProfile"
    "aws:redshift/cluster:Cluster"
    "aws:redshift/clusterIamRoles:ClusterIamRoles"
    "aws:redshift/clusterSnapshot:ClusterSnapshot"
    "aws:redshift/dataShareAuthorization:DataShareAuthorization"
    "aws:redshift/dataShareConsumerAssociation:DataShareConsumerAssociation"
    "aws:redshift/endpointAccess:EndpointAccess"
    "aws:redshift/endpointAuthorization:EndpointAuthorization"
    "aws:redshift/eventSubscription:EventSubscription"
    "aws:redshift/hsmClientCertificate:HsmClientCertificate"
    "aws:redshift/hsmConfiguration:HsmConfiguration"
    "aws:redshift/logging:Logging"
    "aws:redshift/parameterGroup:ParameterGroup"
    "aws:redshift/partner:Partner"
    "aws:redshift/resourcePolicy:ResourcePolicy"
    "aws:redshift/scheduledAction:ScheduledAction"
    "aws:redshift/snapshotCopy:SnapshotCopy"
    "aws:redshift/snapshotCopyGrant:SnapshotCopyGrant"
    "aws:redshift/snapshotSchedule:SnapshotSchedule"
    "aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation"
    "aws:redshift/subnetGroup:SubnetGroup"
    "aws:redshift/usageLimit:UsageLimit"
    "aws:redshiftdata/statement:Statement"
    "aws:redshiftserverless/customDomainAssociation:CustomDomainAssociation"
    "aws:redshiftserverless/endpointAccess:EndpointAccess"
    "aws:redshiftserverless/namespace:Namespace"
    "aws:redshiftserverless/resourcePolicy:ResourcePolicy"
    "aws:redshiftserverless/snapshot:Snapshot"
    "aws:redshiftserverless/usageLimit:UsageLimit"
    "aws:redshiftserverless/workgroup:Workgroup"
    "aws:rekognition/collection:Collection"
    "aws:rekognition/project:Project"
    "aws:resourceexplorer/index:Index"
    "aws:resourceexplorer/view:View"
    "aws:resourcegroups/group:Group"
    "aws:resourcegroups/resource:Resource"
    "aws:rolesanywhere/profile:Profile"
    "aws:rolesanywhere/trustAnchor:TrustAnchor"
    "aws:route53/cidrCollection:CidrCollection"
    "aws:route53/cidrLocation:CidrLocation"
    "aws:route53/delegationSet:DelegationSet"
    "aws:route53/healthCheck:HealthCheck"
    "aws:route53/hostedZoneDnsSec:HostedZoneDnsSec"
    "aws:route53/keySigningKey:KeySigningKey"
    "aws:route53/queryLog:QueryLog"
    "aws:route53/record:Record"
    "aws:route53/resolverConfig:ResolverConfig"
    "aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig"
    "aws:route53/resolverEndpoint:ResolverEndpoint"
    "aws:route53/resolverFirewallConfig:ResolverFirewallConfig"
    "aws:route53/resolverFirewallDomainList:ResolverFirewallDomainList"
    "aws:route53/resolverFirewallRule:ResolverFirewallRule"
    "aws:route53/resolverFirewallRuleGroup:ResolverFirewallRuleGroup"
    "aws:route53/resolverFirewallRuleGroupAssociation:ResolverFirewallRuleGroupAssociation"
    "aws:route53/resolverQueryLogConfig:ResolverQueryLogConfig"
    "aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation"
    "aws:route53/resolverRule:ResolverRule"
    "aws:route53/resolverRuleAssociation:ResolverRuleAssociation"
    "aws:route53/trafficPolicy:TrafficPolicy"
    "aws:route53/trafficPolicyInstance:TrafficPolicyInstance"
    "aws:route53/vpcAssociationAuthorization:VpcAssociationAuthorization"
    "aws:route53/zone:Zone"
    "aws:route53/zoneAssociation:ZoneAssociation"
    "aws:route53domains/delegationSignerRecord:DelegationSignerRecord"
    "aws:route53domains/registeredDomain:RegisteredDomain"
    "aws:route53recoverycontrol/cluster:Cluster"
    "aws:route53recoverycontrol/controlPanel:ControlPanel"
    "aws:route53recoverycontrol/routingControl:RoutingControl"
    "aws:route53recoverycontrol/safetyRule:SafetyRule"
    "aws:route53recoveryreadiness/cell:Cell"
    "aws:route53recoveryreadiness/readinessCheck:ReadinessCheck"
    "aws:route53recoveryreadiness/recoveryGroup:RecoveryGroup"
    "aws:route53recoveryreadiness/resourceSet:ResourceSet"
    "aws:rum/appMonitor:AppMonitor"
    "aws:rum/metricsDestination:MetricsDestination"
    "aws:s3/accessPoint:AccessPoint"
    "aws:s3/accountPublicAccessBlock:AccountPublicAccessBlock"
    "aws:s3/analyticsConfiguration:AnalyticsConfiguration"
    "aws:s3/bucket:Bucket"
    "aws:s3/bucketAccelerateConfigurationV2:BucketAccelerateConfigurationV2"
    "aws:s3/bucketAclV2:BucketAclV2"
    "aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2"
    "aws:s3/bucketIntelligentTieringConfiguration:BucketIntelligentTieringConfiguration"
    "aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2"
    "aws:s3/bucketLoggingV2:BucketLoggingV2"
    "aws:s3/bucketMetric:BucketMetric"
    "aws:s3/bucketNotification:BucketNotification"
    "aws:s3/bucketObject:BucketObject"
    "aws:s3/bucketObjectLockConfigurationV2:BucketObjectLockConfigurationV2"
    "aws:s3/bucketObjectv2:BucketObjectv2"
    "aws:s3/bucketOwnershipControls:BucketOwnershipControls"
    "aws:s3/bucketPolicy:BucketPolicy"
    "aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock"
    "aws:s3/bucketReplicationConfig:BucketReplicationConfig"
    "aws:s3/bucketRequestPaymentConfigurationV2:BucketRequestPaymentConfigurationV2"
    "aws:s3/bucketServerSideEncryptionConfigurationV2:BucketServerSideEncryptionConfigurationV2"
    "aws:s3/bucketV2:BucketV2"
    "aws:s3/bucketVersioningV2:BucketVersioningV2"
    "aws:s3/bucketWebsiteConfigurationV2:BucketWebsiteConfigurationV2"
    "aws:s3/directoryBucket:DirectoryBucket"
    "aws:s3/inventory:Inventory"
    "aws:s3/objectCopy:ObjectCopy"
    "aws:s3control/accessGrant:AccessGrant"
    "aws:s3control/accessGrantsInstance:AccessGrantsInstance"
    "aws:s3control/accessGrantsInstanceResourcePolicy:AccessGrantsInstanceResourcePolicy"
    "aws:s3control/accessGrantsLocation:AccessGrantsLocation"
    "aws:s3control/accessPointPolicy:AccessPointPolicy"
    "aws:s3control/bucket:Bucket"
    "aws:s3control/bucketLifecycleConfiguration:BucketLifecycleConfiguration"
    "aws:s3control/bucketPolicy:BucketPolicy"
    "aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint"
    "aws:s3control/multiRegionAccessPointPolicy:MultiRegionAccessPointPolicy"
    "aws:s3control/objectLambdaAccessPoint:ObjectLambdaAccessPoint"
    "aws:s3control/objectLambdaAccessPointPolicy:ObjectLambdaAccessPointPolicy"
    "aws:s3control/storageLensConfiguration:StorageLensConfiguration"
    "aws:s3outposts/endpoint:Endpoint"
    "aws:sagemaker/app:App"
    "aws:sagemaker/appImageConfig:AppImageConfig"
    "aws:sagemaker/codeRepository:CodeRepository"
    "aws:sagemaker/dataQualityJobDefinition:DataQualityJobDefinition"
    "aws:sagemaker/device:Device"
    "aws:sagemaker/deviceFleet:DeviceFleet"
    "aws:sagemaker/domain:Domain"
    "aws:sagemaker/endpoint:Endpoint"
    "aws:sagemaker/endpointConfiguration:EndpointConfiguration"
    "aws:sagemaker/featureGroup:FeatureGroup"
    "aws:sagemaker/flowDefinition:FlowDefinition"
    "aws:sagemaker/humanTaskUI:HumanTaskUI"
    "aws:sagemaker/image:Image"
    "aws:sagemaker/imageVersion:ImageVersion"
    "aws:sagemaker/model:Model"
    "aws:sagemaker/modelPackageGroup:ModelPackageGroup"
    "aws:sagemaker/modelPackageGroupPolicy:ModelPackageGroupPolicy"
    "aws:sagemaker/monitoringSchedule:MonitoringSchedule"
    "aws:sagemaker/notebookInstance:NotebookInstance"
    "aws:sagemaker/notebookInstanceLifecycleConfiguration:NotebookInstanceLifecycleConfiguration"
    "aws:sagemaker/pipeline:Pipeline"
    "aws:sagemaker/project:Project"
    "aws:sagemaker/servicecatalogPortfolioStatus:ServicecatalogPortfolioStatus"
    "aws:sagemaker/space:Space"
    "aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig"
    "aws:sagemaker/userProfile:UserProfile"
    "aws:sagemaker/workforce:Workforce"
    "aws:sagemaker/workteam:Workteam"
    "aws:scheduler/schedule:Schedule"
    "aws:scheduler/scheduleGroup:ScheduleGroup"
    "aws:schemas/discoverer:Discoverer"
    "aws:schemas/registry:Registry"
    "aws:schemas/registryPolicy:RegistryPolicy"
    "aws:schemas/schema:Schema"
    "aws:secretsmanager/secret:Secret"
    "aws:secretsmanager/secretPolicy:SecretPolicy"
    "aws:secretsmanager/secretRotation:SecretRotation"
    "aws:secretsmanager/secretVersion:SecretVersion"
    "aws:securityhub/account:Account"
    "aws:securityhub/actionTarget:ActionTarget"
    "aws:securityhub/automationRule:AutomationRule"
    "aws:securityhub/configurationPolicy:ConfigurationPolicy"
    "aws:securityhub/configurationPolicyAssociation:ConfigurationPolicyAssociation"
    "aws:securityhub/findingAggregator:FindingAggregator"
    "aws:securityhub/insight:Insight"
    "aws:securityhub/inviteAccepter:InviteAccepter"
    "aws:securityhub/member:Member"
    "aws:securityhub/organizationAdminAccount:OrganizationAdminAccount"
    "aws:securityhub/organizationConfiguration:OrganizationConfiguration"
    "aws:securityhub/productSubscription:ProductSubscription"
    "aws:securityhub/standardsControl:StandardsControl"
    "aws:securityhub/standardsSubscription:StandardsSubscription"
    "aws:securitylake/awsLogSource:AwsLogSource"
    "aws:securitylake/customLogSource:CustomLogSource"
    "aws:securitylake/dataLake:DataLake"
    "aws:securitylake/subscriber:Subscriber"
    "aws:securitylake/subscriberNotification:SubscriberNotification"
    "aws:serverlessrepository/cloudFormationStack:CloudFormationStack"
    "aws:servicecatalog/appregistryApplication:AppregistryApplication"
    "aws:servicecatalog/budgetResourceAssociation:BudgetResourceAssociation"
    "aws:servicecatalog/constraint:Constraint"
    "aws:servicecatalog/organizationsAccess:OrganizationsAccess"
    "aws:servicecatalog/portfolio:Portfolio"
    "aws:servicecatalog/portfolioShare:PortfolioShare"
    "aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation"
    "aws:servicecatalog/product:Product"
    "aws:servicecatalog/productPortfolioAssociation:ProductPortfolioAssociation"
    "aws:servicecatalog/provisionedProduct:ProvisionedProduct"
    "aws:servicecatalog/provisioningArtifact:ProvisioningArtifact"
    "aws:servicecatalog/serviceAction:ServiceAction"
    "aws:servicecatalog/tagOption:TagOption"
    "aws:servicecatalog/tagOptionResourceAssociation:TagOptionResourceAssociation"
    "aws:servicediscovery/httpNamespace:HttpNamespace"
    "aws:servicediscovery/instance:Instance"
    "aws:servicediscovery/privateDnsNamespace:PrivateDnsNamespace"
    "aws:servicediscovery/publicDnsNamespace:PublicDnsNamespace"
    "aws:servicediscovery/service:Service"
    "aws:servicequotas/serviceQuota:ServiceQuota"
    "aws:servicequotas/template:Template"
    "aws:servicequotas/templateAssociation:TemplateAssociation"
    "aws:ses/activeReceiptRuleSet:ActiveReceiptRuleSet"
    "aws:ses/configurationSet:ConfigurationSet"
    "aws:ses/domainDkim:DomainDkim"
    "aws:ses/domainIdentity:DomainIdentity"
    "aws:ses/domainIdentityVerification:DomainIdentityVerification"
    "aws:ses/emailIdentity:EmailIdentity"
    "aws:ses/eventDestination:EventDestination"
    "aws:ses/identityNotificationTopic:IdentityNotificationTopic"
    "aws:ses/identityPolicy:IdentityPolicy"
    "aws:ses/mailFrom:MailFrom"
    "aws:ses/receiptFilter:ReceiptFilter"
    "aws:ses/receiptRule:ReceiptRule"
    "aws:ses/receiptRuleSet:ReceiptRuleSet"
    "aws:ses/template:Template"
    "aws:sesv2/accountVdmAttributes:AccountVdmAttributes"
    "aws:sesv2/configurationSet:ConfigurationSet"
    "aws:sesv2/configurationSetEventDestination:ConfigurationSetEventDestination"
    "aws:sesv2/contactList:ContactList"
    "aws:sesv2/dedicatedIpAssignment:DedicatedIpAssignment"
    "aws:sesv2/dedicatedIpPool:DedicatedIpPool"
    "aws:sesv2/emailIdentity:EmailIdentity"
    "aws:sesv2/emailIdentityFeedbackAttributes:EmailIdentityFeedbackAttributes"
    "aws:sesv2/emailIdentityMailFromAttributes:EmailIdentityMailFromAttributes"
    "aws:sesv2/emailIdentityPolicy:EmailIdentityPolicy"
    "aws:sfn/activity:Activity"
    "aws:sfn/alias:Alias"
    "aws:sfn/stateMachine:StateMachine"
    "aws:shield/applicationLayerAutomaticResponse:ApplicationLayerAutomaticResponse"
    "aws:shield/drtAccessLogBucketAssociation:DrtAccessLogBucketAssociation"
    "aws:shield/drtAccessRoleArnAssociation:DrtAccessRoleArnAssociation"
    "aws:shield/proactiveEngagement:ProactiveEngagement"
    "aws:shield/protection:Protection"
    "aws:shield/protectionGroup:ProtectionGroup"
    "aws:shield/protectionHealthCheckAssociation:ProtectionHealthCheckAssociation"
    "aws:signer/signingJob:SigningJob"
    "aws:signer/signingProfile:SigningProfile"
    "aws:signer/signingProfilePermission:SigningProfilePermission"
    "aws:simpledb/domain:Domain"
    "aws:sns/dataProtectionPolicy:DataProtectionPolicy"
    "aws:sns/platformApplication:PlatformApplication"
    "aws:sns/smsPreferences:SmsPreferences"
    "aws:sns/topic:Topic"
    "aws:sns/topicPolicy:TopicPolicy"
    "aws:sns/topicSubscription:TopicSubscription"
    "aws:sqs/queue:Queue"
    "aws:sqs/queuePolicy:QueuePolicy"
    "aws:sqs/redriveAllowPolicy:RedriveAllowPolicy"
    "aws:sqs/redrivePolicy:RedrivePolicy"
    "aws:ssm/activation:Activation"
    "aws:ssm/association:Association"
    "aws:ssm/contactsRotation:ContactsRotation"
    "aws:ssm/defaultPatchBaseline:DefaultPatchBaseline"
    "aws:ssm/document:Document"
    "aws:ssm/maintenanceWindow:MaintenanceWindow"
    "aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget"
    "aws:ssm/maintenanceWindowTask:MaintenanceWindowTask"
    "aws:ssm/parameter:Parameter"
    "aws:ssm/patchBaseline:PatchBaseline"
    "aws:ssm/patchGroup:PatchGroup"
    "aws:ssm/resourceDataSync:ResourceDataSync"
    "aws:ssm/serviceSetting:ServiceSetting"
    "aws:ssmcontacts/contact:Contact"
    "aws:ssmcontacts/contactChannel:ContactChannel"
    "aws:ssmcontacts/plan:Plan"
    "aws:ssmincidents/replicationSet:ReplicationSet"
    "aws:ssmincidents/responsePlan:ResponsePlan"
    "aws:ssoadmin/accountAssignment:AccountAssignment"
    "aws:ssoadmin/application:Application"
    "aws:ssoadmin/applicationAccessScope:ApplicationAccessScope"
    "aws:ssoadmin/applicationAssignment:ApplicationAssignment"
    "aws:ssoadmin/applicationAssignmentConfiguration:ApplicationAssignmentConfiguration"
    "aws:ssoadmin/customerManagedPolicyAttachment:CustomerManagedPolicyAttachment"
    "aws:ssoadmin/instanceAccessControlAttributes:InstanceAccessControlAttributes"
    "aws:ssoadmin/managedPolicyAttachment:ManagedPolicyAttachment"
    "aws:ssoadmin/permissionSet:PermissionSet"
    "aws:ssoadmin/permissionSetInlinePolicy:PermissionSetInlinePolicy"
    "aws:ssoadmin/permissionsBoundaryAttachment:PermissionsBoundaryAttachment"
    "aws:ssoadmin/trustedTokenIssuer:TrustedTokenIssuer"
    "aws:storagegateway/cache:Cache"
    "aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume"
    "aws:storagegateway/fileSystemAssociation:FileSystemAssociation"
    "aws:storagegateway/gateway:Gateway"
    "aws:storagegateway/nfsFileShare:NfsFileShare"
    "aws:storagegateway/smbFileShare:SmbFileShare"
    "aws:storagegateway/storedIscsiVolume:StoredIscsiVolume"
    "aws:storagegateway/tapePool:TapePool"
    "aws:storagegateway/uploadBuffer:UploadBuffer"
    "aws:storagegateway/workingStorage:WorkingStorage"
    "aws:swf/domain:Domain"
    "aws:synthetics/canary:Canary"
    "aws:synthetics/group:Group"
    "aws:synthetics/groupAssociation:GroupAssociation"
    "aws:timestreamwrite/database:Database"
    "aws:timestreamwrite/table:Table"
    "aws:transcribe/languageModel:LanguageModel"
    "aws:transcribe/medicalVocabulary:MedicalVocabulary"
    "aws:transcribe/vocabulary:Vocabulary"
    "aws:transcribe/vocabularyFilter:VocabularyFilter"
    "aws:transfer/access:Access"
    "aws:transfer/agreement:Agreement"
    "aws:transfer/certificate:Certificate"
    "aws:transfer/connector:Connector"
    "aws:transfer/profile:Profile"
    "aws:transfer/server:Server"
    "aws:transfer/sshKey:SshKey"
    "aws:transfer/tag:Tag"
    "aws:transfer/user:User"
    "aws:transfer/workflow:Workflow"
    "aws:verifiedaccess/endpoint:Endpoint"
    "aws:verifiedaccess/group:Group"
    "aws:verifiedaccess/instance:Instance"
    "aws:verifiedaccess/instanceLoggingConfiguration:InstanceLoggingConfiguration"
    "aws:verifiedaccess/instanceTrustProviderAttachment:InstanceTrustProviderAttachment"
    "aws:verifiedaccess/trustProvider:TrustProvider"
    "aws:verifiedpermissions/policy:Policy"
    "aws:verifiedpermissions/policyStore:PolicyStore"
    "aws:verifiedpermissions/policyTemplate:PolicyTemplate"
    "aws:verifiedpermissions/schema:Schema"
    "aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule"
    "aws:vpc/securityGroupIngressRule:SecurityGroupIngressRule"
    "aws:vpclattice/accessLogSubscription:AccessLogSubscription"
    "aws:vpclattice/authPolicy:AuthPolicy"
    "aws:vpclattice/listener:Listener"
    "aws:vpclattice/listenerRule:ListenerRule"
    "aws:vpclattice/resourcePolicy:ResourcePolicy"
    "aws:vpclattice/service:Service"
    "aws:vpclattice/serviceNetwork:ServiceNetwork"
    "aws:vpclattice/serviceNetworkServiceAssociation:ServiceNetworkServiceAssociation"
    "aws:vpclattice/serviceNetworkVpcAssociation:ServiceNetworkVpcAssociation"
    "aws:vpclattice/targetGroup:TargetGroup"
    "aws:vpclattice/targetGroupAttachment:TargetGroupAttachment"
    "aws:waf/byteMatchSet:ByteMatchSet"
    "aws:waf/geoMatchSet:GeoMatchSet"
    "aws:waf/ipSet:IpSet"
    "aws:waf/rateBasedRule:RateBasedRule"
    "aws:waf/regexMatchSet:RegexMatchSet"
    "aws:waf/regexPatternSet:RegexPatternSet"
    "aws:waf/rule:Rule"
    "aws:waf/ruleGroup:RuleGroup"
    "aws:waf/sizeConstraintSet:SizeConstraintSet"
    "aws:waf/sqlInjectionMatchSet:SqlInjectionMatchSet"
    "aws:waf/webAcl:WebAcl"
    "aws:waf/xssMatchSet:XssMatchSet"
    "aws:wafregional/byteMatchSet:ByteMatchSet"
    "aws:wafregional/geoMatchSet:GeoMatchSet"
    "aws:wafregional/ipSet:IpSet"
    "aws:wafregional/rateBasedRule:RateBasedRule"
    "aws:wafregional/regexMatchSet:RegexMatchSet"
    "aws:wafregional/regexPatternSet:RegexPatternSet"
    "aws:wafregional/rule:Rule"
    "aws:wafregional/ruleGroup:RuleGroup"
    "aws:wafregional/sizeConstraintSet:SizeConstraintSet"
    "aws:wafregional/sqlInjectionMatchSet:SqlInjectionMatchSet"
    "aws:wafregional/webAcl:WebAcl"
    "aws:wafregional/webAclAssociation:WebAclAssociation"
    "aws:wafregional/xssMatchSet:XssMatchSet"
    "aws:wafv2/ipSet:IpSet"
    "aws:wafv2/regexPatternSet:RegexPatternSet"
    "aws:wafv2/ruleGroup:RuleGroup"
    "aws:wafv2/webAcl:WebAcl"
    "aws:wafv2/webAclAssociation:WebAclAssociation"
    "aws:wafv2/webAclLoggingConfiguration:WebAclLoggingConfiguration"
    "aws:worklink/fleet:Fleet"
    "aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation"
    "aws:workspaces/connectionAlias:ConnectionAlias"
    "aws:workspaces/directory:Directory"
    "aws:workspaces/ipGroup:IpGroup"
    "aws:workspaces/workspace:Workspace"
    "aws:xray/encryptionConfig:EncryptionConfig"
    "aws:xray/group:Group"
    "aws:xray/samplingRule:SamplingRule"
|]

let typeRequiresFullArnToImport = set [|
    "aws:acm/certificate:Certificate"
    "aws:acmpca/certificate:Certificate"
    "aws:acmpca/certificateAuthority:CertificateAuthority"
    "aws:acmpca/policy:Policy"
    "aws:alb/listener:Listener"
    "aws:alb/listenerCertificate:ListenerCertificate"
    "aws:alb/listenerRule:ListenerRule"
    "aws:alb/loadBalancer:LoadBalancer"
    "aws:alb/targetGroup:TargetGroup"
    "aws:amp/ruleGroupNamespace:RuleGroupNamespace"
    "aws:appflow/connectorProfile:ConnectorProfile"
    "aws:appflow/flow:Flow"
    "aws:apprunner/autoScalingConfigurationVersion:AutoScalingConfigurationVersion"
    "aws:apprunner/customDomainAssociation:CustomDomainAssociation"
    "aws:apprunner/observabilityConfiguration:ObservabilityConfiguration"
    "aws:apprunner/service:Service"
    "aws:apprunner/vpcConnector:VpcConnector"
    "aws:apprunner/vpcIngressConnection:VpcIngressConnection"
    "aws:auditmanager/assessmentDelegation:AssessmentDelegation"
    "aws:batch/jobDefinition:JobDefinition"
    "aws:batch/jobQueue:JobQueue"
    "aws:batch/schedulingPolicy:SchedulingPolicy"
    "aws:bcmdata/export:Export"
    "aws:bedrock/customModel:CustomModel"
    "aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput"
    "aws:cloudformation/cloudFormationType:CloudFormationType"
    "aws:cloudfront/keyvaluestoreKey:KeyvaluestoreKey"
    "aws:cloudfront/realtimeLogConfig:RealtimeLogConfig"
    "aws:cloudtrail/eventDataStore:EventDataStore"
    "aws:cloudtrail/trail:Trail"
    "aws:cloudwatch/queryDefinition:QueryDefinition"
    "aws:codeartifact/domain:Domain"
    "aws:codeartifact/domainPermissions:DomainPermissions"
    "aws:codeartifact/repository:Repository"
    "aws:codeartifact/repositoryPermissionsPolicy:RepositoryPermissionsPolicy"
    "aws:codebuild/reportGroup:ReportGroup"
    "aws:codebuild/resourcePolicy:ResourcePolicy"
    "aws:codebuild/sourceCredential:SourceCredential"
    "aws:codepipeline/webhook:Webhook"
    "aws:codestarconnections/connection:Connection"
    "aws:codestarconnections/host:Host"
    "aws:codestarnotifications/notificationRule:NotificationRule"
    "aws:comprehend/documentClassifier:DocumentClassifier"
    "aws:comprehend/entityRecognizer:EntityRecognizer"
    "aws:connect/lambdaFunctionAssociation:LambdaFunctionAssociation"
    "aws:controltower/controlTowerControl:ControlTowerControl"
    "aws:dataexchange/dataSet:DataSet"
    "aws:datasync/agent:Agent"
    "aws:datasync/efsLocation:EfsLocation"
    "aws:datasync/fsxOpenZfsFileSystem:FsxOpenZfsFileSystem"
    "aws:datasync/locationAzureBlob:LocationAzureBlob"
    "aws:datasync/locationFsxLustre:LocationFsxLustre"
    "aws:datasync/locationFsxOntapFileSystem:LocationFsxOntapFileSystem"
    "aws:datasync/locationFsxWindows:LocationFsxWindows"
    "aws:datasync/locationHdfs:LocationHdfs"
    "aws:datasync/locationObjectStorage:LocationObjectStorage"
    "aws:datasync/locationSmb:LocationSmb"
    "aws:datasync/nfsLocation:NfsLocation"
    "aws:datasync/s3Location:S3Location"
    "aws:datasync/task:Task"
    "aws:detective/graph:Graph"
    "aws:detective/invitationAccepter:InvitationAccepter"
    "aws:detective/member:Member"
    "aws:detective/organizationConfiguration:OrganizationConfiguration"
    "aws:devicefarm/devicePool:DevicePool"
    "aws:devicefarm/instanceProfile:InstanceProfile"
    "aws:devicefarm/networkProfile:NetworkProfile"
    "aws:devicefarm/project:Project"
    "aws:devicefarm/testGridProject:TestGridProject"
    "aws:devicefarm/upload:Upload"
    "aws:dms/replicationConfig:ReplicationConfig"
    "aws:docdb/elasticCluster:ElasticCluster"
    "aws:dynamodb/kinesisStreamingDestination:KinesisStreamingDestination"
    "aws:dynamodb/resourcePolicy:ResourcePolicy"
    "aws:dynamodb/tableExport:TableExport"
    "aws:dynamodb/tag:Tag"
    "aws:ebs/defaultKmsKey:DefaultKmsKey"
    "aws:ecs/tag:Tag"
    "aws:ecs/taskDefinition:TaskDefinition"
    "aws:ecs/taskSet:TaskSet"
    "aws:evidently/feature:Feature"
    "aws:evidently/launch:Launch"
    "aws:evidently/project:Project"
    "aws:evidently/segment:Segment"
    "aws:globalaccelerator/accelerator:Accelerator"
    "aws:globalaccelerator/crossAccountAttachment:CrossAccountAttachment"
    "aws:globalaccelerator/customRoutingAccelerator:CustomRoutingAccelerator"
    "aws:globalaccelerator/customRoutingEndpointGroup:CustomRoutingEndpointGroup"
    "aws:globalaccelerator/customRoutingListener:CustomRoutingListener"
    "aws:globalaccelerator/endpointGroup:EndpointGroup"
    "aws:globalaccelerator/listener:Listener"
    "aws:glue/registry:Registry"
    "aws:glue/schema:Schema"
    "aws:iam/groupPolicyAttachment:GroupPolicyAttachment"
    "aws:iam/openIdConnectProvider:OpenIdConnectProvider"
    "aws:iam/policy:Policy"
    "aws:iam/rolePolicyAttachment:RolePolicyAttachment"
    "aws:iam/samlProvider:SamlProvider"
    "aws:iam/serviceLinkedRole:ServiceLinkedRole"
    "aws:iam/userPolicyAttachment:UserPolicyAttachment"
    "aws:iam/virtualMfaDevice:VirtualMfaDevice"
    "aws:imagebuilder/component:Component"
    "aws:imagebuilder/containerRecipe:ContainerRecipe"
    "aws:imagebuilder/distributionConfiguration:DistributionConfiguration"
    "aws:imagebuilder/image:Image"
    "aws:imagebuilder/imagePipeline:ImagePipeline"
    "aws:imagebuilder/imageRecipe:ImageRecipe"
    "aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration"
    "aws:imagebuilder/workflow:Workflow"
    "aws:inspector/assessmentTarget:AssessmentTarget"
    "aws:inspector/assessmentTemplate:AssessmentTemplate"
    "aws:iot/topicRuleDestination:TopicRuleDestination"
    "aws:ivs/channel:Channel"
    "aws:ivs/playbackKeyPair:PlaybackKeyPair"
    "aws:ivs/recordingConfiguration:RecordingConfiguration"
    "aws:ivschat/loggingConfiguration:LoggingConfiguration"
    "aws:ivschat/room:Room"
    "aws:kinesis/analyticsApplication:AnalyticsApplication"
    "aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream"
    "aws:kinesis/resourcePolicy:ResourcePolicy"
    "aws:kinesis/streamConsumer:StreamConsumer"
    "aws:kinesis/videoStream:VideoStream"
    "aws:kinesisanalyticsv2/application:Application"
    "aws:kms/externalKey:ExternalKey"
    "aws:lambda/codeSigningConfig:CodeSigningConfig"
    "aws:lambda/functionEventInvokeConfig:FunctionEventInvokeConfig"
    "aws:lambda/layerVersion:LayerVersion"
    "aws:lambda/layerVersionPermission:LayerVersionPermission"
    "aws:lb/listener:Listener"
    "aws:lb/listenerCertificate:ListenerCertificate"
    "aws:lb/listenerRule:ListenerRule"
    "aws:lb/loadBalancer:LoadBalancer"
    "aws:lb/targetGroup:TargetGroup"
    "aws:lb/trustStore:TrustStore"
    "aws:lb/trustStoreRevocation:TrustStoreRevocation"
    "aws:licensemanager/association:Association"
    "aws:licensemanager/licenseConfiguration:LicenseConfiguration"
    "aws:licensemanager/licenseGrant:LicenseGrant"
    "aws:licensemanager/licenseGrantAccepter:LicenseGrantAccepter"
    "aws:msk/cluster:Cluster"
    "aws:msk/clusterPolicy:ClusterPolicy"
    "aws:msk/configuration:Configuration"
    "aws:msk/replicator:Replicator"
    "aws:msk/scramSecretAssociation:ScramSecretAssociation"
    "aws:msk/serverlessCluster:ServerlessCluster"
    "aws:msk/vpcConnection:VpcConnection"
    "aws:mskconnect/connector:Connector"
    "aws:mskconnect/customPlugin:CustomPlugin"
    "aws:mskconnect/workerConfiguration:WorkerConfiguration"
    "aws:networkfirewall/firewall:Firewall"
    "aws:networkfirewall/firewallPolicy:FirewallPolicy"
    "aws:networkfirewall/loggingConfiguration:LoggingConfiguration"
    "aws:networkfirewall/resourcePolicy:ResourcePolicy"
    "aws:networkfirewall/ruleGroup:RuleGroup"
    "aws:networkmanager/connection:Connection"
    "aws:networkmanager/customerGatewayAssociation:CustomerGatewayAssociation"
    "aws:networkmanager/device:Device"
    "aws:networkmanager/link:Link"
    "aws:networkmanager/site:Site"
    "aws:networkmanager/transitGatewayConnectPeerAssociation:TransitGatewayConnectPeerAssociation"
    "aws:networkmanager/transitGatewayRegistration:TransitGatewayRegistration"
    "aws:oam/link:Link"
    "aws:oam/sink:Sink"
    "aws:oam/sinkPolicy:SinkPolicy"
    "aws:ram/principalAssociation:PrincipalAssociation"
    "aws:ram/resourceAssociation:ResourceAssociation"
    "aws:ram/resourceShare:ResourceShare"
    "aws:ram/resourceShareAccepter:ResourceShareAccepter"
    "aws:rds/clusterActivityStream:ClusterActivityStream"
    "aws:rds/clusterRoleAssociation:ClusterRoleAssociation"
    "aws:rds/instanceAutomatedBackupsReplication:InstanceAutomatedBackupsReplication"
    "aws:rds/roleAssociation:RoleAssociation"
    "aws:redshift/dataShareAuthorization:DataShareAuthorization"
    "aws:redshift/dataShareConsumerAssociation:DataShareConsumerAssociation"
    "aws:resourceexplorer/view:View"
    "aws:route53recoverycontrol/cluster:Cluster"
    "aws:route53recoverycontrol/controlPanel:ControlPanel"
    "aws:route53recoverycontrol/routingControl:RoutingControl"
    "aws:route53recoverycontrol/safetyRule:SafetyRule"
    "aws:s3/accessPoint:AccessPoint"
    "aws:s3control/accessPointPolicy:AccessPointPolicy"
    "aws:s3control/bucket:Bucket"
    "aws:s3control/bucketLifecycleConfiguration:BucketLifecycleConfiguration"
    "aws:s3control/bucketPolicy:BucketPolicy"
    "aws:s3outposts/endpoint:Endpoint"
    "aws:sagemaker/app:App"
    "aws:sagemaker/space:Space"
    "aws:sagemaker/userProfile:UserProfile"
    "aws:secretsmanager/secret:Secret"
    "aws:secretsmanager/secretPolicy:SecretPolicy"
    "aws:secretsmanager/secretRotation:SecretRotation"
    "aws:secretsmanager/secretVersion:SecretVersion"
    "aws:securityhub/actionTarget:ActionTarget"
    "aws:securityhub/automationRule:AutomationRule"
    "aws:securityhub/findingAggregator:FindingAggregator"
    "aws:securityhub/insight:Insight"
    "aws:securityhub/productSubscription:ProductSubscription"
    "aws:securityhub/standardsSubscription:StandardsSubscription"
    "aws:securitylake/dataLake:DataLake"
    "aws:servicecatalog/principalPortfolioAssociation:PrincipalPortfolioAssociation"
    "aws:sfn/activity:Activity"
    "aws:sfn/alias:Alias"
    "aws:sfn/stateMachine:StateMachine"
    "aws:shield/protectionHealthCheckAssociation:ProtectionHealthCheckAssociation"
    "aws:sns/dataProtectionPolicy:DataProtectionPolicy"
    "aws:sns/platformApplication:PlatformApplication"
    "aws:sns/topic:Topic"
    "aws:sns/topicPolicy:TopicPolicy"
    "aws:sns/topicSubscription:TopicSubscription"
    "aws:ssm/contactsRotation:ContactsRotation"
    "aws:ssm/defaultPatchBaseline:DefaultPatchBaseline"
    "aws:ssm/serviceSetting:ServiceSetting"
    "aws:ssmcontacts/contactChannel:ContactChannel"
    "aws:ssoadmin/accountAssignment:AccountAssignment"
    "aws:ssoadmin/application:Application"
    "aws:ssoadmin/applicationAccessScope:ApplicationAccessScope"
    "aws:ssoadmin/applicationAssignment:ApplicationAssignment"
    "aws:ssoadmin/applicationAssignmentConfiguration:ApplicationAssignmentConfiguration"
    "aws:ssoadmin/customerManagedPolicyAttachment:CustomerManagedPolicyAttachment"
    "aws:ssoadmin/instanceAccessControlAttributes:InstanceAccessControlAttributes"
    "aws:ssoadmin/managedPolicyAttachment:ManagedPolicyAttachment"
    "aws:ssoadmin/permissionSet:PermissionSet"
    "aws:ssoadmin/permissionSetInlinePolicy:PermissionSetInlinePolicy"
    "aws:ssoadmin/permissionsBoundaryAttachment:PermissionsBoundaryAttachment"
    "aws:ssoadmin/trustedTokenIssuer:TrustedTokenIssuer"
    "aws:storagegateway/cache:Cache"
    "aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume"
    "aws:storagegateway/fileSystemAssociation:FileSystemAssociation"
    "aws:storagegateway/gateway:Gateway"
    "aws:storagegateway/nfsFileShare:NfsFileShare"
    "aws:storagegateway/smbFileShare:SmbFileShare"
    "aws:storagegateway/storedIscsiVolume:StoredIscsiVolume"
    "aws:storagegateway/tapePool:TapePool"
    "aws:storagegateway/uploadBuffer:UploadBuffer"
    "aws:storagegateway/workingStorage:WorkingStorage"
    "aws:synthetics/groupAssociation:GroupAssociation"
    "aws:transfer/tag:Tag"
    "aws:wafv2/webAclAssociation:WebAclAssociation"
    "aws:wafv2/webAclLoggingConfiguration:WebAclLoggingConfiguration"
    "aws:worklink/fleet:Fleet"
    "aws:worklink/websiteCertificateAuthorityAssociation:WebsiteCertificateAuthorityAssociation"
    "aws:xray/group:Group"
|]

// The following 179 resources could require an odd format to import
// an odd format being something other than just the resource ID or resource ARN

let resourcesWithOddImportFormat = Map.ofList [
    "aws:accessanalyzer/archiveRule:ArchiveRule", [
        "$ pulumi import aws:accessanalyzer/archiveRule:ArchiveRule example example-analyzer/example-rule"
    ]
    "aws:account/alternativeContact:AlternativeContact", [
        "$ pulumi import aws:account/alternativeContact:AlternativeContact operations OPERATIONS"
        "$ pulumi import aws:account/alternativeContact:AlternativeContact operations 1234567890/OPERATIONS"
    ]
    "aws:amplify/backendEnvironment:BackendEnvironment", [
        "$ pulumi import aws:amplify/backendEnvironment:BackendEnvironment example d2ypk4k47z8u6/example"
    ]
    "aws:amplify/branch:Branch", [
        "$ pulumi import aws:amplify/branch:Branch master d2ypk4k47z8u6/master"
    ]
    "aws:amplify/domainAssociation:DomainAssociation", [
        "$ pulumi import aws:amplify/domainAssociation:DomainAssociation app d2ypk4k47z8u6/example.com"
    ]
    "aws:apigateway/authorizer:Authorizer", [
        "$ pulumi import aws:apigateway/authorizer:Authorizer authorizer 12345abcde/example"
    ]
    "aws:apigateway/basePathMapping:BasePathMapping", [
        "$ pulumi import aws:apigateway/basePathMapping:BasePathMapping example example.com/"
        "$ pulumi import aws:apigateway/basePathMapping:BasePathMapping example example.com/base-path"
    ]
    "aws:apigateway/deployment:Deployment", [
        "$ pulumi import aws:apigateway/deployment:Deployment example aabbccddee/1122334"
    ]
    "aws:apigateway/documentationPart:DocumentationPart", [
        "$ pulumi import aws:apigateway/documentationPart:DocumentationPart example 5i4e1ko720/3oyy3t"
    ]
    "aws:apigateway/documentationVersion:DocumentationVersion", [
        "$ pulumi import aws:apigateway/documentationVersion:DocumentationVersion example 5i4e1ko720/example-version"
    ]
    "aws:apigateway/integration:Integration", [
        "$ pulumi import aws:apigateway/integration:Integration example 12345abcde/67890fghij/GET"
    ]
    "aws:apigateway/integrationResponse:IntegrationResponse", [
        "$ pulumi import aws:apigateway/integrationResponse:IntegrationResponse example 12345abcde/67890fghij/GET/200"
    ]
    "aws:apigateway/method:Method", [
        "$ pulumi import aws:apigateway/method:Method example 12345abcde/67890fghij/GET"
    ]
    "aws:apigateway/methodResponse:MethodResponse", [
        "$ pulumi import aws:apigateway/methodResponse:MethodResponse example 12345abcde/67890fghij/GET/200"
    ]
    "aws:apigateway/methodSettings:MethodSettings", [
        "$ pulumi import aws:apigateway/methodSettings:MethodSettings example 12345abcde/example/test/GET"
    ]
    "aws:apigateway/model:Model", [
        "$ pulumi import aws:apigateway/model:Model example 12345abcde/example"
    ]
    "aws:apigateway/requestValidator:RequestValidator", [
        "$ pulumi import aws:apigateway/requestValidator:RequestValidator example 12345abcde/67890fghij"
    ]
    "aws:apigateway/resource:Resource", [
        "$ pulumi import aws:apigateway/resource:Resource example 12345abcde/67890fghij"
    ]
    "aws:apigateway/response:Response", [
        "$ pulumi import aws:apigateway/response:Response example 12345abcde/UNAUTHORIZED"
    ]
    "aws:apigateway/stage:Stage", [
        "$ pulumi import aws:apigateway/stage:Stage example 12345abcde/example"
    ]
    "aws:apigateway/usagePlan:UsagePlan", [
        "$ pulumi import aws:apigateway/usagePlan:UsagePlan myusageplan &lt;usage_plan_id&gt;"
    ]
    "aws:apigateway/usagePlanKey:UsagePlanKey", [
        "$ pulumi import aws:apigateway/usagePlanKey:UsagePlanKey key 12345abcde/zzz"
    ]
    "aws:apigatewayv2/apiMapping:ApiMapping", [
        "$ pulumi import aws:apigatewayv2/apiMapping:ApiMapping example 1122334/ws-api.example.com"
    ]
    "aws:apigatewayv2/authorizer:Authorizer", [
        "$ pulumi import aws:apigatewayv2/authorizer:Authorizer example aabbccddee/1122334"
    ]
    "aws:apigatewayv2/deployment:Deployment", [
        "$ pulumi import aws:apigatewayv2/deployment:Deployment example aabbccddee/1122334"
    ]
    "aws:apigatewayv2/integration:Integration", [
        "$ pulumi import aws:apigatewayv2/integration:Integration example aabbccddee/1122334"
    ]
    "aws:apigatewayv2/integrationResponse:IntegrationResponse", [
        "$ pulumi import aws:apigatewayv2/integrationResponse:IntegrationResponse example aabbccddee/1122334/998877"
    ]
    "aws:apigatewayv2/model:Model", [
        "$ pulumi import aws:apigatewayv2/model:Model example aabbccddee/1122334"
    ]
    "aws:apigatewayv2/route:Route", [
        "$ pulumi import aws:apigatewayv2/route:Route example aabbccddee/1122334"
    ]
    "aws:apigatewayv2/routeResponse:RouteResponse", [
        "$ pulumi import aws:apigatewayv2/routeResponse:RouteResponse example aabbccddee/1122334/998877"
    ]
    "aws:apigatewayv2/stage:Stage", [
        "$ pulumi import aws:apigatewayv2/stage:Stage example aabbccddee/example-stage"
    ]
    "aws:appautoscaling/policy:Policy", [
        "$ pulumi import aws:appautoscaling/policy:Policy test-policy service-namespace/resource-id/scalable-dimension/policy-name"
    ]
    "aws:appautoscaling/target:Target", [
        "$ pulumi import aws:appautoscaling/target:Target test-target service-namespace/resource-id/scalable-dimension"
    ]
    "aws:appconfig/deployment:Deployment", [
        "$ pulumi import aws:appconfig/deployment:Deployment example 71abcde/11xxxxx/1"
    ]
    "aws:appconfig/hostedConfigurationVersion:HostedConfigurationVersion", [
        "$ pulumi import aws:appconfig/hostedConfigurationVersion:HostedConfigurationVersion example 71abcde/11xxxxx/2"
    ]
    "aws:appmesh/gatewayRoute:GatewayRoute", [
        "$ pulumi import aws:appmesh/gatewayRoute:GatewayRoute example mesh/gw1/example-gateway-route"
    ]
    "aws:appmesh/route:Route", [
        "$ pulumi import aws:appmesh/route:Route serviceb simpleapp/serviceB/serviceB-route"
    ]
    "aws:appmesh/virtualGateway:VirtualGateway", [
        "$ pulumi import aws:appmesh/virtualGateway:VirtualGateway example mesh/gw1"
    ]
    "aws:appmesh/virtualNode:VirtualNode", [
        "$ pulumi import aws:appmesh/virtualNode:VirtualNode serviceb1 simpleapp/serviceBv1"
    ]
    "aws:appmesh/virtualRouter:VirtualRouter", [
        "$ pulumi import aws:appmesh/virtualRouter:VirtualRouter serviceb simpleapp/serviceB"
    ]
    "aws:appmesh/virtualService:VirtualService", [
        "$ pulumi import aws:appmesh/virtualService:VirtualService servicea simpleapp/servicea.simpleapp.local"
    ]
    "aws:appstream/fleetStackAssociation:FleetStackAssociation", [
        "$ pulumi import aws:appstream/fleetStackAssociation:FleetStackAssociation example fleetName/stackName"
    ]
    "aws:appstream/user:User", [
        "$ pulumi import aws:appstream/user:User example UserName/AuthenticationType"
    ]
    "aws:appstream/userStackAssociation:UserStackAssociation", [
        "$ pulumi import aws:appstream/userStackAssociation:UserStackAssociation example userName/auhtenticationType/stackName"
    ]
    "aws:athena/preparedStatement:PreparedStatement", [
        "$ pulumi import aws:athena/preparedStatement:PreparedStatement example 12345abcde/example"
    ]
    "aws:autoscaling/lifecycleHook:LifecycleHook", [
        "$ pulumi import aws:autoscaling/lifecycleHook:LifecycleHook test-lifecycle-hook asg-name/lifecycle-hook-name"
    ]
    "aws:autoscaling/policy:Policy", [
        "$ pulumi import aws:autoscaling/policy:Policy test-policy asg-name/policy-name"
    ]
    "aws:autoscaling/schedule:Schedule", [
        "$ pulumi import aws:autoscaling/schedule:Schedule resource-name auto-scaling-group-name/scheduled-action-name"
    ]
    "aws:autoscaling/tag:Tag", [
        "$ pulumi import aws:autoscaling/tag:Tag example asg-example,k8s.io/cluster-autoscaler/node-template/label/eks.amazonaws.com/capacityType"
    ]
    "aws:cfg/organizationCustomPolicyRule:OrganizationCustomPolicyRule", [
        "$ pulumi import aws:cfg/organizationCustomPolicyRule:OrganizationCustomPolicyRule example example_rule_name"
    ]
    "aws:cloudformation/stackSet:StackSet", [
        "$ pulumi import aws:cloudformation/stackSet:StackSet example example"
        "$ pulumi import aws:cloudformation/stackSet:StackSet example example,DELEGATED_ADMIN"
    ]
    "aws:cloudformation/stackSetInstance:StackSetInstance", [
        "$ pulumi import aws:cloudformation/stackSetInstance:StackSetInstance example example,123456789012,us-east-1"
        "$ pulumi import aws:cloudformation/stackSetInstance:StackSetInstance example example,ou-sdas-123123123/ou-sdas-789789789,us-east-1"
        "$ pulumi import aws:cloudformation/stackSetInstance:StackSetInstance example example,ou-sdas-123123123/ou-sdas-789789789,us-east-1,DELEGATED_ADMIN"
    ]
    "aws:cloudwatch/eventPermission:EventPermission", [
        "$ pulumi import aws:cloudwatch/eventPermission:EventPermission DevAccountAccess example-event-bus/DevAccountAccess"
    ]
    "aws:cloudwatch/eventRule:EventRule", [
        "$ pulumi import aws:cloudwatch/eventRule:EventRule console example-event-bus/capture-console-sign-in"
    ]
    "aws:cloudwatch/eventTarget:EventTarget", [
        "$ pulumi import aws:cloudwatch/eventTarget:EventTarget test-event-target rule-name/target-id"
    ]
    "aws:cloudwatch/logMetricFilter:LogMetricFilter", [
        "$ pulumi import aws:cloudwatch/logMetricFilter:LogMetricFilter test /aws/lambda/function:test"
    ]
    "aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter", [
        "$ pulumi import aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter test_lambdafunction_logfilter &#34;/aws/lambda/example_lambda_name|test_lambdafunction_logfilter&#34;"
    ]
    "aws:codeguruprofiler/profilingGroup:ProfilingGroup", [
        "$ pulumi import aws:codeguruprofiler/profilingGroup:ProfilingGroup example profiling_group-name-12345678"
    ]
    "aws:cognito/identityPoolProviderPrincipalTag:IdentityPoolProviderPrincipalTag", [
        "$ pulumi import aws:cognito/identityPoolProviderPrincipalTag:IdentityPoolProviderPrincipalTag example us-west-2_abc123:CorpAD"
    ]
    "aws:cognito/identityProvider:IdentityProvider", [
        "$ pulumi import aws:cognito/identityProvider:IdentityProvider example us-west-2_abc123:CorpAD"
    ]
    "aws:cognito/managedUserPoolClient:ManagedUserPoolClient", [
        "$ pulumi import aws:cognito/managedUserPoolClient:ManagedUserPoolClient client us-west-2_abc123/3ho4ek12345678909nh3fmhpko"
    ]
    "aws:cognito/resourceServer:ResourceServer", [
        "$ pulumi import aws:cognito/resourceServer:ResourceServer example &#34;us-west-2_abc123|https://example.com&#34;"
    ]
    "aws:cognito/user:User", [
        "$ pulumi import aws:cognito/user:User user us-east-1_vG78M4goG/user"
    ]
    "aws:cognito/userGroup:UserGroup", [
        "$ pulumi import aws:cognito/userGroup:UserGroup group us-east-1_vG78M4goG/user-group"
    ]
    "aws:cognito/userPool:UserPool", [
        "$ pulumi import aws:cognito/userPool:UserPool pool us-west-2_abc123"
    ]
    "aws:cognito/userPoolClient:UserPoolClient", [
        "$ pulumi import aws:cognito/userPoolClient:UserPoolClient client us-west-2_abc123/3ho4ek12345678909nh3fmhpko"
    ]
    "aws:cognito/userPoolUICustomization:UserPoolUICustomization", [
        "$ pulumi import aws:cognito/userPoolUICustomization:UserPoolUICustomization example us-west-2_ZCTarbt5C,12bu4fuk3mlgqa2rtrujgp6egq"
    ]
    "aws:connect/instanceStorageConfig:InstanceStorageConfig", [
        "$ pulumi import aws:connect/instanceStorageConfig:InstanceStorageConfig example f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5:CHAT_TRANSCRIPTS"
    ]
    "aws:customerprofiles/profile:Profile", [
        "$ pulumi import aws:customerprofiles/profile:Profile example domain-name/5f2f473dfbe841eb8d05cfc2a4c926df"
    ]
    "aws:directconnect/gatewayAssociation:GatewayAssociation", [
        "$ pulumi import aws:directconnect/gatewayAssociation:GatewayAssociation example 345508c3-7215-4aef-9832-07c125d5bd0f/vgw-98765432"
    ]
    "aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal", [
        "$ pulumi import aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal example ac90e981-b718-4364-872d-65478c84fafe"
        "$ pulumi import aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal example ac90e981-b718-4364-872d-65478c84fafe/abcd1234-dcba-5678-be23-cdef9876ab45/vgw-12345678"
    ]
    "aws:directoryservice/sharedDirectory:SharedDirectory", [
        "$ pulumi import aws:directoryservice/sharedDirectory:SharedDirectory example d-1234567890/d-9267633ece"
    ]
    "aws:directoryservice/trust:Trust", [
        "$ pulumi import aws:directoryservice/trust:Trust example d-926724cf57/directory.example.com"
    ]
    "aws:dynamodb/contributorInsights:ContributorInsights", [
        "$ pulumi import aws:dynamodb/contributorInsights:ContributorInsights test name:ExampleTableName/index:ExampleIndexName/123456789012"
    ]
    "aws:ec2/amiLaunchPermission:AmiLaunchPermission", [
        "$ pulumi import aws:ec2/amiLaunchPermission:AmiLaunchPermission example 123456789012/ami-12345678"
    ]
    "aws:ec2/localGatewayRoute:LocalGatewayRoute", [
        "$ pulumi import aws:ec2/localGatewayRoute:LocalGatewayRoute example lgw-rtb-12345678_172.16.0.0/16"
    ]
    "aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry", [
        "$ pulumi import aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry default pl-0570a1d2d725c16be,10.0.3.0/24"
    ]
    "aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment", [
        "$ pulumi import aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment sg_attachment eni-1234567890abcdef0_sg-1234567890abcdef0"
    ]
    "aws:ec2/route:Route", [
        "$ pulumi import aws:ec2/route:Route my_route rtb-656C65616E6F72_10.42.0.0/16"
        "$ pulumi import aws:ec2/route:Route my_route rtb-656C65616E6F72_2620:0:2d0:200::8/125"
        "$ pulumi import aws:ec2/route:Route my_route rtb-656C65616E6F72_pl-0570a1d2d725c16be"
    ]
    "aws:ec2/routeTableAssociation:RouteTableAssociation", [
        "$ pulumi import aws:ec2/routeTableAssociation:RouteTableAssociation assoc subnet-6777656e646f6c796e/rtb-656c65616e6f72"
        "$ pulumi import aws:ec2/routeTableAssociation:RouteTableAssociation assoc igw-01b3a60780f8d034a/rtb-656c65616e6f72"
    ]
    "aws:ec2/volumeAttachment:VolumeAttachment", [
        "$ pulumi import aws:ec2/volumeAttachment:VolumeAttachment example /dev/sdh:vol-049df61146c4d7901:i-12345678"
    ]
    "aws:ec2/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter", [
        "$ pulumi import aws:ec2/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter foo vpce-svc-0f97a19d3fa8220bc_vpce-010601a6db371e263"
    ]
    "aws:ec2/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation", [
        "$ pulumi import aws:ec2/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation example vpce-aaaaaaaa/rtb-bbbbbbbb"
    ]
    "aws:ec2/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation", [
        "$ pulumi import aws:ec2/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation example vpce-aaaaaaaa/subnet-bbbbbbbbbbbbbbbbb"
    ]
    "aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr", [
        "$ pulumi import aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr example 172.20.0.0/24_ipam-pool-0e634f5a1517cccdc"
    ]
    "aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation", [
        "$ pulumi import aws:ec2/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation example ipam-pool-alloc-0dc6d196509c049ba8b549ff99f639736_ipam-pool-07cfb559e0921fcbe"
    ]
    "aws:ec2clientvpn/authorizationRule:AuthorizationRule", [
        "$ pulumi import aws:ec2clientvpn/authorizationRule:AuthorizationRule example cvpn-endpoint-0ac3a1abbccddd666,10.1.0.0/24"
        "$ pulumi import aws:ec2clientvpn/authorizationRule:AuthorizationRule example cvpn-endpoint-0ac3a1abbccddd666,10.1.0.0/24,team-a"
    ]
    "aws:ec2clientvpn/route:Route", [
        "$ pulumi import aws:ec2clientvpn/route:Route example cvpn-endpoint-1234567890abcdef,subnet-9876543210fedcba,10.1.0.0/24"
    ]
    "aws:ec2transitgateway/policyTableAssociation:PolicyTableAssociation", [
        "$ pulumi import aws:ec2transitgateway/policyTableAssociation:PolicyTableAssociation example tgw-rtb-12345678_tgw-attach-87654321"
    ]
    "aws:ec2transitgateway/prefixListReference:PrefixListReference", [
        "$ pulumi import aws:ec2transitgateway/prefixListReference:PrefixListReference example tgw-rtb-12345678_pl-12345678"
    ]
    "aws:ec2transitgateway/route:Route", [
        "$ pulumi import aws:ec2transitgateway/route:Route example tgw-rtb-12345678_0.0.0.0/0"
    ]
    "aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation", [
        "$ pulumi import aws:ec2transitgateway/routeTableAssociation:RouteTableAssociation example tgw-rtb-12345678_tgw-attach-87654321"
    ]
    "aws:ec2transitgateway/routeTablePropagation:RouteTablePropagation", [
        "$ pulumi import aws:ec2transitgateway/routeTablePropagation:RouteTablePropagation example tgw-rtb-12345678_tgw-attach-87654321"
    ]
    "aws:ecs/service:Service", [
        "$ pulumi import aws:ecs/service:Service imported cluster-name/service-name"
    ]
    "aws:eks/accessEntry:AccessEntry", [
        "$ pulumi import aws:eks/accessEntry:AccessEntry my_eks_access_entry my_cluster_name:my_principal_arn"
    ]
    "aws:eks/accessPolicyAssociation:AccessPolicyAssociation", [
        "$ pulumi import aws:eks/accessPolicyAssociation:AccessPolicyAssociation my_eks_access_entry my_cluster_name#my_principal_arn#my_policy_arn"
    ]
    "aws:eks/addon:Addon", [
        "$ pulumi import aws:eks/addon:Addon my_eks_addon my_cluster_name:my_addon_name"
    ]
    "aws:eks/fargateProfile:FargateProfile", [
        "$ pulumi import aws:eks/fargateProfile:FargateProfile my_fargate_profile my_cluster:my_fargate_profile"
    ]
    "aws:eks/identityProviderConfig:IdentityProviderConfig", [
        "$ pulumi import aws:eks/identityProviderConfig:IdentityProviderConfig my_identity_provider_config my_cluster:my_identity_provider_config"
    ]
    "aws:eks/nodeGroup:NodeGroup", [
        "$ pulumi import aws:eks/nodeGroup:NodeGroup my_node_group my_cluster:my_node_group"
    ]
    "aws:emr/instanceFleet:InstanceFleet", [
        "$ pulumi import aws:emr/instanceFleet:InstanceFleet example j-123456ABCDEF/if-15EK4O09RZLNR"
    ]
    "aws:emr/instanceGroup:InstanceGroup", [
        "$ pulumi import aws:emr/instanceGroup:InstanceGroup task_group j-123456ABCDEF/ig-15EK4O09RZLNR"
    ]
    "aws:glue/catalogDatabase:CatalogDatabase", [
        "$ pulumi import aws:glue/catalogDatabase:CatalogDatabase database 123456789012:my_database"
    ]
    "aws:glue/userDefinedFunction:UserDefinedFunction", [
        "$ pulumi import aws:glue/userDefinedFunction:UserDefinedFunction func 123456789012:my_database:my_func"
    ]
    "aws:iam/groupPolicy:GroupPolicy", [
        "$ pulumi import aws:iam/groupPolicy:GroupPolicy mypolicy group_of_mypolicy_name:mypolicy_name"
    ]
    "aws:iam/rolePolicy:RolePolicy", [
        "$ pulumi import aws:iam/rolePolicy:RolePolicy mypolicy role_of_mypolicy_name:mypolicy_name"
    ]
    "aws:iam/userGroupMembership:UserGroupMembership", [
        "$ pulumi import aws:iam/userGroupMembership:UserGroupMembership example1 user1/group1/group2"
    ]
    "aws:iam/userPolicy:UserPolicy", [
        "$ pulumi import aws:iam/userPolicy:UserPolicy mypolicy user_of_mypolicy_name:mypolicy_name"
    ]
    "aws:identitystore/group:Group", [
        "$ pulumi import aws:identitystore/group:Group example d-9c6705e95c/b8a1c340-8031-7071-a2fb-7dc540320c30"
    ]
    "aws:identitystore/groupMembership:GroupMembership", [
        "$ pulumi import aws:identitystore/groupMembership:GroupMembership example d-0000000000/00000000-0000-0000-0000-000000000000"
    ]
    "aws:identitystore/user:User", [
        "$ pulumi import aws:identitystore/user:User example d-9c6705e95c/065212b4-9061-703b-5876-13a517ae2a7c"
    ]
    "aws:iot/thingGroupMembership:ThingGroupMembership", [
        "$ pulumi import aws:iot/thingGroupMembership:ThingGroupMembership example thing_group_name/thing_name"
    ]
    "aws:kendra/dataSource:DataSource", [
        "$ pulumi import aws:kendra/dataSource:DataSource example 1045d08d-66ef-4882-b3ed-dfb7df183e90/b34dfdf7-1f2b-4704-9581-79e00296845f"
    ]
    "aws:kendra/experience:Experience", [
        "$ pulumi import aws:kendra/experience:Experience example 1045d08d-66ef-4882-b3ed-dfb7df183e90/b34dfdf7-1f2b-4704-9581-79e00296845f"
    ]
    "aws:kendra/faq:Faq", [
        "$ pulumi import aws:kendra/faq:Faq example faq-123456780/idx-8012925589"
    ]
    "aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList", [
        "$ pulumi import aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList example blocklist-123456780/idx-8012925589"
    ]
    "aws:kendra/thesaurus:Thesaurus", [
        "$ pulumi import aws:kendra/thesaurus:Thesaurus example thesaurus-123456780/idx-8012925589"
    ]
    "aws:keyspaces/table:Table", [
        "$ pulumi import aws:keyspaces/table:Table example my_keyspace/my_table"
    ]
    "aws:kinesisanalyticsv2/applicationSnapshot:ApplicationSnapshot", [
        "$ pulumi import aws:kinesisanalyticsv2/applicationSnapshot:ApplicationSnapshot example example-application/example-snapshot"
    ]
    "aws:kms/alias:Alias", [
        "$ pulumi import aws:kms/alias:Alias a alias/my-key-alias"
    ]
    "aws:lakeformation/dataCellsFilter:DataCellsFilter", [
        "$ pulumi import aws:lakeformation/dataCellsFilter:DataCellsFilter example database_name,name,table_catalog_id,table_name"
    ]
    "aws:lakeformation/lfTag:LfTag", [
        "$ pulumi import aws:lakeformation/lfTag:LfTag example 123456789012:some_key"
    ]
    "aws:lambda/alias:Alias", [
        "$ pulumi import aws:lambda/alias:Alias test_lambda_alias my_test_lambda_function/my_alias"
    ]
    "aws:lambda/permission:Permission", [
        "$ pulumi import aws:lambda/permission:Permission test_lambda_permission my_test_lambda_function/AllowExecutionFromCloudWatch"
        "$ pulumi import aws:lambda/permission:Permission test_lambda_permission my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch"
    ]
    "aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", [
        "$ pulumi import aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig example my_function,production"
    ]
    "aws:lex/v2modelsBotLocale:V2modelsBotLocale", [
        "$ pulumi import aws:lex/v2modelsBotLocale:V2modelsBotLocale example en_US,abcd-12345678,1"
    ]
    "aws:lex/v2modelsIntent:V2modelsIntent", [
        "$ pulumi import aws:lex/v2modelsIntent:V2modelsIntent example intent-42874:bot-11376:DRAFT:en_US"
    ]
    "aws:lex/v2modelsSlotType:V2modelsSlotType", [
        "$ pulumi import aws:lex/v2modelsSlotType:V2modelsSlotType example bot-1234,DRAFT,en_US,slot_type-id-12345678"
    ]
    "aws:lightsail/containerServiceDeploymentVersion:ContainerServiceDeploymentVersion", [
        "$ pulumi import aws:lightsail/containerServiceDeploymentVersion:ContainerServiceDeploymentVersion example container-service-1/1"
    ]
    "aws:lightsail/instance:Instance", [
        "$ pulumi import aws:lightsail/instance:Instance gitlab_test &#39;custom_gitlab&#39;"
    ]
    "aws:location/trackerAssociation:TrackerAssociation", [
        "$ pulumi import aws:location/trackerAssociation:TrackerAssociation example &#34;tracker_name|consumer_arn&#34;"
    ]
    "aws:medialive/multiplexProgram:MultiplexProgram", [
        "$ pulumi import aws:medialive/multiplexProgram:MultiplexProgram example example_program/1234567"
    ]
    "aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy", [
        "$ pulumi import aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy example example/data"
    ]
    "aws:opensearch/serverlessLifecyclePolicy:ServerlessLifecyclePolicy", [
        "$ pulumi import aws:opensearch/serverlessLifecyclePolicy:ServerlessLifecyclePolicy example example/retention"
    ]
    "aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig", [
        "$ pulumi import aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig example saml/123456789012/example"
    ]
    "aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy", [
        "$ pulumi import aws:opensearch/serverlessSecurityPolicy:ServerlessSecurityPolicy example example/encryption"
    ]
    "aws:organizations/account:Account", [
        "$ pulumi import aws:organizations/account:Account my_account 111111111111"
        "$ pulumi import aws:organizations/account:Account my_account 111111111111_ALLOW"
    ]
    "aws:organizations/delegatedAdministrator:DelegatedAdministrator", [
        "$ pulumi import aws:organizations/delegatedAdministrator:DelegatedAdministrator example 123456789012/config.amazonaws.com"
    ]
    "aws:quicksight/dataSource:DataSource", [
        "$ pulumi import aws:quicksight/dataSource:DataSource example 123456789123/my-data-source-id"
    ]
    "aws:quicksight/group:Group", [
        "$ pulumi import aws:quicksight/group:Group example 123456789123/default/tf-example"
    ]
    "aws:quicksight/groupMembership:GroupMembership", [
        "$ pulumi import aws:quicksight/groupMembership:GroupMembership example 123456789123/default/all-access-users/john_smith"
    ]
    "aws:rds/customDbEngineVersion:CustomDbEngineVersion", [
        "$ pulumi import aws:rds/customDbEngineVersion:CustomDbEngineVersion example custom-oracle-ee-cdb:19.cdb_cev1"
    ]
    "aws:rds/proxyEndpoint:ProxyEndpoint", [
        "$ pulumi import aws:rds/proxyEndpoint:ProxyEndpoint example example/example"
    ]
    "aws:rds/proxyTarget:ProxyTarget", [
        "$ pulumi import aws:rds/proxyTarget:ProxyTarget example example-proxy/default/RDS_INSTANCE/example-instance"
        "$ pulumi import aws:rds/proxyTarget:ProxyTarget example example-proxy/default/TRACKED_CLUSTER/example-cluster"
    ]
    "aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation", [
        "$ pulumi import aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation default tf-redshift-cluster/tf-redshift-snapshot-schedule"
    ]
    "aws:route53/record:Record", [
        "$ pulumi import aws:route53/record:Record myrecord Z4KAPRWWNC7JR_dev.example.com_NS"
        "$ pulumi import aws:route53/record:Record myrecord Z4KAPRWWNC7JR_dev.example.com_NS_dev"
    ]
    "aws:route53/trafficPolicy:TrafficPolicy", [
        "$ pulumi import aws:route53/trafficPolicy:TrafficPolicy example 01a52019-d16f-422a-ae72-c306d2b6df7e/1"
    ]
    "aws:s3/bucketObject:BucketObject", [
        "$ pulumi import aws:s3/bucketObject:BucketObject example some-bucket-name/some/key.txt"
        "$ pulumi import aws:s3/bucketObject:BucketObject example s3://some-bucket-name/some/key.txt"
    ]
    "aws:s3/bucketObjectv2:BucketObjectv2", [
        "$ pulumi import aws:s3/bucketObjectv2:BucketObjectv2 example some-bucket-name/some/key.txt"
        "$ pulumi import aws:s3/bucketObjectv2:BucketObjectv2 example s3://some-bucket-name/some/key.txt"
    ]
    "aws:sagemaker/device:Device", [
        "$ pulumi import aws:sagemaker/device:Device example my-fleet/my-device"
    ]
    "aws:sagemaker/featureGroup:FeatureGroup", [
        "$ pulumi import aws:sagemaker/featureGroup:FeatureGroup test_feature_group feature_group-foo"
    ]
    "aws:scheduler/schedule:Schedule", [
        "$ pulumi import aws:scheduler/schedule:Schedule example my-schedule-group/my-schedule"
    ]
    "aws:schemas/schema:Schema", [
        "$ pulumi import aws:schemas/schema:Schema test name/registry"
    ]
    "aws:servicediscovery/instance:Instance", [
        "$ pulumi import aws:servicediscovery/instance:Instance example 0123456789/i-0123"
    ]
    "aws:servicequotas/serviceQuota:ServiceQuota", [
        "$ pulumi import aws:servicequotas/serviceQuota:ServiceQuota example vpc/L-F678F1CE"
    ]
    "aws:ses/eventDestination:EventDestination", [
        "$ pulumi import aws:ses/eventDestination:EventDestination sns some-configuration-set-test/event-destination-sns"
    ]
    "aws:ses/receiptRule:ReceiptRule", [
        "$ pulumi import aws:ses/receiptRule:ReceiptRule my_rule my_rule_set:my_rule"
    ]
    "aws:ses/receiptRuleSet:ReceiptRuleSet", [
        "$ pulumi import aws:ses/receiptRuleSet:ReceiptRuleSet my_rule_set my_rule_set_name"
    ]
    "aws:sesv2/configurationSetEventDestination:ConfigurationSetEventDestination", [
        "$ pulumi import aws:sesv2/configurationSetEventDestination:ConfigurationSetEventDestination example example_configuration_set|example_event_destination"
    ]
    "aws:sesv2/emailIdentityPolicy:EmailIdentityPolicy", [
        "$ pulumi import aws:sesv2/emailIdentityPolicy:EmailIdentityPolicy example example_email_identity|example_policy_name"
    ]
    "aws:signer/signingProfile:SigningProfile", [
        "$ pulumi import aws:signer/signingProfile:SigningProfile test_signer_signing_profile test_sp_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK"
    ]
    "aws:signer/signingProfilePermission:SigningProfilePermission", [
        "$ pulumi import aws:signer/signingProfilePermission:SigningProfilePermission test_signer_signing_profile_permission prod_profile_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK/ProdAccountStartSigningJobStatementId"
    ]
    "aws:sqs/queue:Queue", [
        "$ pulumi import aws:sqs/queue:Queue public_queue https://queue.amazonaws.com/80398EXAMPLE/MyQueue"
    ]
    "aws:sqs/queuePolicy:QueuePolicy", [
        "$ pulumi import aws:sqs/queuePolicy:QueuePolicy test https://queue.amazonaws.com/0123456789012/myqueue"
    ]
    "aws:sqs/redriveAllowPolicy:RedriveAllowPolicy", [
        "$ pulumi import aws:sqs/redriveAllowPolicy:RedriveAllowPolicy test https://queue.amazonaws.com/0123456789012/myqueue"
    ]
    "aws:sqs/redrivePolicy:RedrivePolicy", [
        "$ pulumi import aws:sqs/redrivePolicy:RedrivePolicy test https://queue.amazonaws.com/0123456789012/myqueue"
    ]
    "aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget", [
        "$ pulumi import aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget example mw-0c50858d01EXAMPLE/23639a0b-ddbc-4bca-9e72-78d96EXAMPLE"
    ]
    "aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", [
        "$ pulumi import aws:ssm/maintenanceWindowTask:MaintenanceWindowTask task &lt;window_id&gt;/&lt;window_task_id&gt;"
    ]
    "aws:ssm/parameter:Parameter", [
        "$ pulumi import aws:ssm/parameter:Parameter my_param /my_path/my_paramname"
    ]
    "aws:transfer/access:Access", [
        "$ pulumi import aws:transfer/access:Access example s-12345678/S-1-1-12-1234567890-123456789-1234567890-1234"
    ]
    "aws:transfer/agreement:Agreement", [
        "$ pulumi import aws:transfer/agreement:Agreement example s-4221a88afd5f4362a/a-4221a88afd5f4362a"
    ]
    "aws:transfer/sshKey:SshKey", [
        "$ pulumi import aws:transfer/sshKey:SshKey bar s-12345678/test-username/key-12345"
    ]
    "aws:transfer/user:User", [
        "$ pulumi import aws:transfer/user:User bar s-12345678/test-username"
    ]
    "aws:verifiedaccess/instanceTrustProviderAttachment:InstanceTrustProviderAttachment", [
        "$ pulumi import aws:verifiedaccess/instanceTrustProviderAttachment:InstanceTrustProviderAttachment example vai-1234567890abcdef0/vatp-8012925589"
    ]
    "aws:vpclattice/listener:Listener", [
        "$ pulumi import aws:vpclattice/listener:Listener example svc-1a2b3c4d/listener-987654321"
    ]
    "aws:vpclattice/listenerRule:ListenerRule", [
        "$ pulumi import aws:vpclattice/listenerRule:ListenerRule example service123/listener456/rule789"
    ]
    "aws:wafregional/webAclAssociation:WebAclAssociation", [
        "$ pulumi import aws:wafregional/webAclAssociation:WebAclAssociation foo web_acl_id:resource_arn"
    ]
    "aws:wafv2/ipSet:IpSet", [
        "$ pulumi import aws:wafv2/ipSet:IpSet example a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc/example/REGIONAL"
    ]
    "aws:wafv2/regexPatternSet:RegexPatternSet", [
        "$ pulumi import aws:wafv2/regexPatternSet:RegexPatternSet example a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc/example/REGIONAL"
    ]
]
